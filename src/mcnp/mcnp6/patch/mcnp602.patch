diff -rN '--unified=0' Source/import/frgcpa_.inc Source_dagmc/import/frgcpa_.inc
--- Source/import/frgcpa_.inc
+++ Source_dagmc/import/frgcpa_.inc
@@ -3 +3 @@
-!$OMP THREADPRIVATE (/FRGCPA_/)
+! !$OMP THREADPRIVATE (/FRGCPA_/)
diff -rN '--unified=0' Source/import/frgspa_.inc Source_dagmc/import/frgspa_.inc
--- Source/import/frgspa_.inc
+++ Source_dagmc/import/frgspa_.inc
@@ -3 +3 @@
-!$OMP THREADPRIVATE (/FRGSPA_/)
+! !$OMP THREADPRIVATE (/FRGSPA_/)
diff -rN '--unified=0' Source/src/angl.F90 Source_dagmc/src/angl.F90
--- Source/src/angl.F90
+++ Source_dagmc/src/angl.F90
@@ -15,0 +16 @@
+  use dagmc_mod,   only : isdgmc
@@ -29,0 +31,7 @@
+  ! DAGMC: In CAD mode, circumvent entire function and call DAGMC version instead
+  if (isdgmc == 1) then
+    call dagmcangl(pbl%i%jsu, pbl%r%x, pbl%r%y, pbl%r%z, ang)
+    angl = max(-one, min(one, ang(1)*pbl%r%u + ang(2)*pbl%r%v + ang(3)*pbl%r%w))
+    return
+  endif
+
diff -rN '--unified=0' Source/src/bankit.F90 Source_dagmc/src/bankit.F90
--- Source/src/bankit.F90
+++ Source_dagmc/src/bankit.F90
@@ -69,0 +70 @@
+    use dagmc_mod, only : isdgmc
@@ -101,0 +103,5 @@
+    ! DAGMC:
+    if ( isdgmc == 1 ) then
+      call dagmc_bank_push( nbnk )
+    endif
+
@@ -280,0 +287 @@
+    use dagmc_mod, only : isdgmc
@@ -291,0 +299,5 @@
+  ! DAGMC:
+    if ( isdgmc == 1 ) then
+      call dagmc_bank_usetop()
+    endif
+
@@ -398,0 +411,4 @@
+      ! DAGMC:
+      if ( isdgmc == 1 ) then
+        call dagmc_bank_pop( nbnk )
+      endif
diff -rN '--unified=0' Source/src/celsrf.F90 Source_dagmc/src/celsrf.F90
--- Source/src/celsrf.F90
+++ Source_dagmc/src/celsrf.F90
@@ -25,0 +26 @@
+  use dagmc_mod, only : isdgmc
@@ -445 +446,6 @@
-    write(iuo,460) js,j1,hq,hl,ht,surface_card(k)%symbol,(tpp(i),i=1,n)
+    ! DAGMC: surface_card(k)%symbol returns null characters in DAGMC mode
+    if (isdgmc == 1) then
+      write(iuo,460) js,j1,hq,hl,ht,'',(tpp(i),i=1,n)
+    else
+      write(iuo,460) js,j1,hq,hl,ht,surface_card(k)%symbol,(tpp(i),i=1,n)
+    endif
@@ -501,0 +508,3 @@
+    ! DAGMC: Skip this loop if in CAD mode
+    if (isdgmc == 1) exit
+
diff -rN '--unified=0' Source/src/check_binary_expire.F90 Source_dagmc/src/check_binary_expire.F90
--- Source/src/check_binary_expire.F90
+++ Source_dagmc/src/check_binary_expire.F90
@@ -19 +19 @@
-   use mcnp_env, only : LODDAT
+   use mcnp_env, only : loddat
diff -rN '--unified=0' Source/src/chkcel.F90 Source_dagmc/src/chkcel.F90
--- Source/src/chkcel.F90
+++ Source_dagmc/src/chkcel.F90
@@ -28,0 +29 @@
+  use dagmc_mod,    only : isdgmc
@@ -58,0 +60,6 @@
+
+  ! DAGMC: In CAD mode, circumvent this function and call DAGMC version instead
+  if ( isdgmc == 1 .and. (m == 0 .or. m == 2) ) then
+    call dagmcchkcel(pbl%r%u, pbl%r%v, pbl%r%w, pbl%r%x, pbl%r%y, pbl%r%z, i1, j)
+    return
+  endif
diff -rN '--unified=0' Source/src/dagmc_mod.F90 Source_dagmc/src/dagmc_mod.F90
--- Source/src/dagmc_mod.F90
+++ Source_dagmc/src/dagmc_mod.F90
@@ -0,0 +1,224 @@
+module dagmc_mod
+
+  use mcnp_params
+
+  integer, parameter, public :: &  ! named constant for file distribution mode
+    & DGFM_SEQ   = 0, &
+    & DGFM_READ  = 1, &
+    & DGFM_BCAST = 2
+
+  integer, save :: isdgmc
+
+  integer, save :: dagmc_geom_file_mode = DGFM_SEQ  ! default to a distributed read
+
+  integer, save :: dagmc_srcmode = 0
+  integer, save :: dagmc_usecad  = 0
+  integer, save :: dagmc_distlimit = 0
+
+  integer :: mpb = 5  ! this is the value of pbl_capacity in pblcom.F90
+
+  real(dknd), save :: dagmc_facet_tol
+  real(dknd), save :: dagmc_overlap_thickness
+  real(dknd), save :: dagmc_version
+
+  integer, save :: dagmc_subversion
+
+  public :: &
+    &   lcadrd, &        ! read log file information
+    &   dagmc_msgbcast   ! broadcast dagmc settings from master to slave tasks
+
+contains
+
+  subroutine lcadrd
+    ! Description:
+    ! Reads in the CAD log file and "inserts" it at the header
+    ! of the input file.
+
+    ! >>>>> Modules used
+    use mcnp_iofiles, only : inp, lcad
+
+    ! >>>>> Implict declaration of real variables as doubles
+    implicit real(dknd) (a-h,o-z)
+
+    ! >>>>> Other variables
+    character(len=80)  :: hk          ! Character for line of file being read
+    integer, parameter :: ie = 70     ! I/O index of a scratch file
+    integer            :: it, iu = 0  ! Indices for nxtsym function
+    integer            :: ios = 0     ! IOSTAT for file reading
+
+    ! >>>>> Initialize the scratch file and get to beginning of input file
+    open(ie, status='scratch')
+    rewind iui
+
+    ! >>>>> Check if first line is message block, otherwise assume a title card
+    read(iui, '(a80)', end=1000) hk
+    call nxtsym(hk, ' ', 1, it, iu, 1)
+
+    if ( hk(it:iu) == 'message:' ) then
+      ! Message block exists, read until blank line found
+      do
+        read(iui, '(a80)', end=1000) hk  ! Read in string: exception for eof
+        if ( hk == ' ' ) exit            ! Terminate loop once blank line found
+      enddo
+      ! Read in title card, for message block case
+      read(iui, '(a80)', end=1000) hk
+    endif
+
+    ! Write title card to scratch file
+    write(ie, '(a80)') hk
+
+    ! >>>>> Read in cell/surface cards from log
+    rewind iulc
+    do
+      read(iulc, '(a80)', iostat=ios) hk
+
+      ! Check for end of file or errors
+      if ( ios == 0 ) then
+        write(ie, '(a80)') hk  ! Write the line normally
+      elseif ( ios < 0 ) then
+        exit                   ! Break loop at EOF
+      else
+        goto 2000              ! Exception for severe I/O error
+      endif
+    enddo
+
+    ! >>>> Read in rest of input file
+    ios = 0
+    do
+      read(iui, '(a80)', iostat=ios) hk
+
+      ! Check for end of file or errors
+      if ( ios == 0 ) then
+        write(ie, '(a80)') hk  ! Write the line to scratch file
+      elseif ( ios < 0 ) then
+        exit                   ! Break loop at EOF
+      else
+        goto 3000              ! Exception for severe I/O error
+      endif
+    enddo
+
+    ! >>>>> Echo back to new scratch input file
+    close(iui)
+    rewind ie
+    open(iui, status='scratch')
+    ios = 0
+    do
+      read(ie, '(a80)', iostat=ios) hk
+
+      ! Check for end of file or errors
+      if ( ios == 0 ) then
+        write(iui, '(a80)') hk  ! Write the line in the scratch input file
+      elseif ( ios < 0 ) then
+        exit                    ! Break loop at EOF
+      else
+        goto 4000               ! Exception for severe I/O error
+      endif
+    enddo
+
+    ! >>>>> Finish up
+    rewind iui
+    ! pass1 expects iui to be advanced beyond the title card,
+    ! so read past the first line now
+    read(iui, '(a)')
+
+    close(ie)
+    return
+
+    ! >>>>> Exceptions
+    ! End of File at header of input file
+1000 call expire(0, 'lcadrd', 'unexpected eof in file '//inp)
+    return
+    ! Severe I/O error during reading of CAD log
+2000 call expire(0, 'lcadrd', 'error during read of file '//lcad)
+    return
+    ! Severe I/O error during reading of CAD log
+3000 call expire(0, 'lcadrd', 'error during read of file '//inp)
+    return
+    ! Severe I/O error during echo of scratch file to new input file
+4000 call expire(0, 'lcadrd', 'error stitching input and CAD log')
+    return
+
+  end subroutine lcadrd
+
+  subroutine dagmc_msgbcast
+
+    use messages,     only : msg_bcast
+    use mcnp_iofiles, only : gcad, ftol
+    use mcnp_debug
+
+    call msg_bcast(mynum, isdgmc)
+    call msg_bcast(mynum, dagmc_geom_file_mode)
+    call msg_bcast(mynum, gcad)
+    call msg_bcast(mynum, ftol)
+    call msg_bcast(mynum, dagmc_srcmode)
+    call msg_bcast(mynum, dagmc_usecad)
+    call msg_bcast(mynum, dagmc_distlimit)
+    call msg_bcast(mynum, dagmc_overlap_thickness)
+    call msg_bcast(mynum, dagmc_facet_tol)
+    call msg_bcast(mynum, dagmc_version)
+
+    if ( isdgmc == 1 ) then
+      call dagmcinit(gcad//char(0), len_trim(gcad), ftol//char(0), len_trim(ftol), &
+        &            dagmc_geom_file_mode, dagmc_version, dagmc_subversion, mpb)
+      if ( dagmc_version /= master_dagmc_version ) then
+        ! errprt and fail!
+      end if
+      call dagmc_set_settings(dagmc_distlimit, dagmc_usecad, &
+        &                     dagmc_overlap_thickness, dagmc_srcmode)
+    end if
+
+  end subroutine dagmc_msgbcast
+
+  subroutine init_dagmc
+
+    use mcnp_iofiles, only : jtty, gcad, lcad, fcad, ftol, file_exists
+    use mcnp_env,     only : ver
+
+    ! Check to see if the CAD file exists, if not, abort
+    inquire(file=gcad, exist=file_exists)
+    if (.not.file_exists) then
+      call expire(0,'main','CAD geometry file '//gcad//' does not exist.')
+    endif
+
+    ! Initialize DAGMC, read geometry and initialize OBBTree
+    call dagmcinit(gcad//char(0), len_trim(gcad), &
+      &            ftol//char(0), len_trim(ftol), &
+      &            dagmc_geom_file_mode,dagmc_version, dagmc_subversion, mpb)
+
+    call dagmc_init_settings(dagmc_distlimit, dagmc_usecad, &
+      &                      dagmc_overlap_thickness, dagmc_facet_tol, &
+      &                      dagmc_srcmode)
+
+    ! Print version number message to terminal
+    call dagmc_version_heading(jtty)
+
+    ! Parse metadata and write input cards
+    call dagmcwritemcnp(gcad//char(0), lcad//char(0), len_trim(lcad), ver(1:1)//char(0))
+
+    ! Write geometry file with OBB tree if requested
+    if ( len_trim(fcad) .gt. 0 ) then
+      call dagmcwritefacets(fcad//char(0), len_trim(fcad))
+    endif
+
+    ! Check to ensure that the log file is written
+    inquire(file=lcad, exist=file_exists)
+    if ( .not.file_exists ) then
+      call expire(0,'main','CAD list file '//lcad//' not written by DAGMC.')
+    endif
+
+    ! Open the cad log file on the MCNP side
+    open(unit=iulc, file=lcad, status='old')
+
+  end subroutine init_dagmc
+
+  ! write DagMC version number message to given file
+  subroutine dagmc_version_heading(o)
+
+    integer :: o
+
+    write(o,150) dagmc_version, dagmc_subversion
+150 format(1x,'This problem is using DAGMC version ',f8.3,' w/ DagMC r', i4)
+
+  end subroutine dagmc_version_heading
+
+end module dagmc_mod
diff -rN '--unified=0' Source/src/dbmin.F90 Source_dagmc/src/dbmin.F90
--- Source/src/dbmin.F90
+++ Source_dagmc/src/dbmin.F90
@@ -17,0 +18 @@
+  use dagmc_mod,    only : isdgmc
@@ -30,0 +32,10 @@
+
+  ! DAGMC: Explicitly declare variable for return value for inter-language call
+  real(dknd) :: dbmin_retval = 0
+
+  ! DAGMC: In CAD mode, call MOAB version instead
+  if ( isdgmc == 1 ) then
+    call dagmcdbmin(pbl%i%icl, pbl%r%x, pbl%r%y, pbl%r%z, huge_float, dbmin_retval)
+    dbmin = dbmin_retval
+    return
+  endif
diff -rN '--unified=0' Source/src/echkcl.F90 Source_dagmc/src/echkcl.F90
--- Source/src/echkcl.F90
+++ Source_dagmc/src/echkcl.F90
@@ -16,0 +17 @@
+  use dagmc_mod, only : isdgmc
@@ -31 +32,7 @@
-    call  chkcel(pbl%i%icl,2,j)
+    ! DAGMC
+    if( isdgmc == 1 ) then
+      call dagmcchkcel_by_angle( pbl%r%u, pbl%r%v, pbl%r%w, pbl%r%x, pbl%r%y, pbl%r%z, pbl%i%jsu, pbl%i%icl, j )
+      call dagmc_surf_reflection( pbl%r%u, pbl%r%v, pbl%r%w, 1 )
+    else
+      call chkcel(pbl%i%icl,2,j)
+    endif
diff -rN '--unified=0' Source/src/electr.F90 Source_dagmc/src/electr.F90
--- Source/src/electr.F90
+++ Source_dagmc/src/electr.F90
@@ -38,0 +39 @@
+  use dagmc_mod, only : isdgmc
@@ -131,0 +133,6 @@
+        endif
+
+        ! DAGMC: In DAGMC mode, use the known physics distance to limit geometry search
+        if ( isdgmc == 1 ) then
+          d = min(pbl%r%dtc, pbl%r%dcs)
+          call dagmc_setdis(d)
diff -rN '--unified=0' Source/src/exemes.F90 Source_dagmc/src/exemes.F90
--- Source/src/exemes.F90
+++ Source_dagmc/src/exemes.F90
@@ -275 +275 @@
-      select case( hm(js) )
+      select case( trim(hm(js)) )
diff -rN '--unified=0' Source/src/fmesh_mod.F90 Source_dagmc/src/fmesh_mod.F90
--- Source/src/fmesh_mod.F90
+++ Source_dagmc/src/fmesh_mod.F90
@@ -22,0 +23,3 @@
+  ! DAGMC
+  public :: dagmc_make_fortran_pointer, dagmc_setup_mesh_tally
+
@@ -25,0 +29,4 @@
+  logical, public :: enable_dag_tallies           = .false. ! DAGMC: Indicate any dagmc tally
+  logical, public :: enable_dag_collision_tallies = .false. ! DAGMC: Indicate a collision tally
+  logical, public :: enable_dag_track_tallies     = .false. ! DAGMC: Indicate a track tally
+
@@ -56 +63 @@
-  integer, parameter, public :: nfmesh_keyword_results = 15
+  integer, parameter, public :: nfmesh_keyword_results = 16
@@ -61 +68,2 @@
-  &     'yes       ','no        ','flux      ','source    ','none      ' /) 
+  &     'yes       ','no        ','flux      ','source    ','none      ',   &
+  &     'dag       ' /)
@@ -180,0 +189,26 @@
+  ! DAGMC: These helper functions must be called with non-dereferenced Fortran pointers.
+  ! This interface specification ensures that the calls to these functions
+  ! (which are implemented in C) are made with the correct types
+  interface
+    subroutine dagmc_fmesh_get_tally_data( fm_id, fref ) bind(c)
+      implicit none
+      integer :: fm_id
+      ! The dknd parameter is unavailable in this scope for some reason,
+      ! so I have copied the definition of dknd from mcnp_params
+      real(selected_real_kind(15,307)) , dimension(:), pointer :: fref
+    end subroutine dagmc_fmesh_get_tally_data
+
+    subroutine dagmc_fmesh_get_error_data( fm_id, fref ) bind(c)
+      implicit none
+      integer :: fm_id
+      real(selected_real_kind(15,307)) , dimension(:), pointer :: fref
+    end subroutine dagmc_fmesh_get_error_data
+
+    subroutine dagmc_fmesh_get_scratch_data( fm_id, fref ) bind(c)
+      implicit none
+      integer :: fm_id
+      real(selected_real_kind(15,307)), dimension(:), pointer:: fref
+    end subroutine dagmc_fmesh_get_scratch_data
+
+  end interface
+
@@ -184,0 +219,60 @@
+  ! DAGMC: Helper function - create a valid Fortran pointer from a C array and a length
+  subroutine dagmc_make_fortran_pointer( fref, carray, size ) bind(c)
+    implicit none
+
+    integer :: size ! The size (in doubles) of the array in C
+    real(dknd), dimension(size), target :: carray ! The C pointer
+    real(dknd), dimension(:), pointer :: fref     ! The returned Fortran pointer
+
+    fref => carray
+
+  end subroutine dagmc_make_fortran_pointer
+
+  subroutine dagmc_setup_mesh_tally( idx )
+    implicit none
+    integer :: idx
+    integer :: dagmc_iscol
+    integer :: fmesh_idx
+
+    print *, shape(fm(idx)%fmarry)
+
+    ! Determine if DAGMC tally uses a multiplier
+    ! Default value of -1 indicates no multipliers are present
+    fmesh_idx = -1
+
+    ! Check for energy-dependent multipliers
+    if(fm(idx)%ifm_card/=0 .or. fm(idx)%icx == 1 .or. fm(idx)%intrpol /= 0) then
+      fmesh_idx = idx
+    elseif (fm(idx)%fmult > 0. .and. fm(idx)%fmult /= 1.) then
+      ! Constant multiplier only, not energy-dependent
+      fmesh_idx = idx
+    endif
+
+    ! Setup dagmc mesh; parameters will be read in from FC card
+    if( fm(idx)%n_comment_lines > 0 ) then
+       call dagmc_fmesh_setup_mesh( fm(idx)%ipt, fm(idx)%id, fmesh_idx, &
+                                    fm(idx)%enbin, fm(idx)%nenb, fm(idx)%tot_energy_bin, &
+                                    fm(idx)%comment, fm(idx)%n_comment_lines, dagmc_iscol )
+    else
+      ! No FC card; avoid passing uninitialized pointer to C
+      ! The following call will halt mcnp with an error because of the missing card.
+      ! We could also signal an error and halt here instead.
+      call dagmc_fmesh_setup_mesh( fm(idx)%ipt, fm(idx)%id, fmesh_idx, &
+                                   fm(idx)%enbin, fm(idx)%nenb, fm(idx)%tot_energy_bin, &
+                                   0, 0, dagmc_iscol )
+    endif
+
+    if( dagmc_iscol == 1 ) then
+      enable_dag_collision_tallies = .true.
+    else
+      enable_dag_track_tallies = .true.
+    endif
+
+    if ( fm(idx)%icrd == 3 .and. enable_dag_tallies .eqv. .false.) then
+      enable_dag_tallies = .true.
+    endif
+
+  end subroutine dagmc_setup_mesh_tally
+
+  !-----------------------------------------------------------------------------------------
+
@@ -198,0 +293,3 @@
+    ! DAGMC
+    real(dknd), dimension(:), pointer :: dagmc_runtpe_data
+
@@ -250,0 +348,8 @@
+      ! DAGMC:
+      if ( fm(i)%icrd == 3 ) then
+        ! Get pointer to mesh's working data and fill runtpe with those contents
+        call dagmc_fmesh_get_tally_data( fm(i)%id, dagmc_runtpe_data )
+        write(iu) dagmc_runtpe_data
+        call dagmc_fmesh_get_error_data( fm(i)%id, dagmc_runtpe_data )
+        write(iu) dagmc_runtpe_data
+      endif
@@ -279,0 +385,3 @@
+    ! DAGMC
+    real(dknd), dimension(:), pointer :: dagmc_runtpe_data
+
@@ -462,0 +571,11 @@
+
+      ! DAGMC:
+      if ( fm(i)%icrd == 3 ) then
+        if( .not. is_assoc ) call dagmc_setup_mesh_tally( i )
+        ! Get pointer to mesh's working memory and fill it with runtpe data
+        call dagmc_fmesh_get_tally_data( fm(i)%id, dagmc_runtpe_data )
+        read(iu) dagmc_runtpe_data
+        call dagmc_fmesh_get_error_data( fm(i)%id, dagmc_runtpe_data )
+        read(iu) dagmc_runtpe_data
+      endif
+
@@ -1008 +1127 @@
-    integer :: i
+    integer :: i, j
@@ -1070,0 +1190,9 @@
+      ! DAGMC: send comment contents if this is a dagmc mesh
+      if( fm(i)%icrd == 3 ) then
+        call msg_put( fm(i)%n_comment_lines )
+
+        do j=1,fm(i)%n_comment_lines
+          call msg_put( fm(i)%comment(j) )
+        enddo
+      endif
+
@@ -1092 +1220 @@
-    integer :: i,ix,iy,iz,it,ie,is
+    integer :: i,ix,iy,iz,it,ie,is,j
@@ -1195,0 +1324,13 @@
+      ! DAGMC: receive comment contents if this is a dagmc mesh
+      if( fm(i)%icrd == 3 ) then
+        call msg_get( fm(i)%n_comment_lines )
+
+        allocate( fm(i)%comment( fm(i)%n_comment_lines ), stat=is )
+        if(is/=0) call erprnt(1,1,0,0,0,0,0,1,' "mesh tally memory allocation failure"')
+
+        do j=1,fm(i)%n_comment_lines
+          call msg_get( fm(i)%comment(j) )
+        enddo
+
+      endif
+
@@ -1240,0 +1382,7 @@
+    ! DAGMC:
+    do i = 1,nmesh
+      if( fm(i)%icrd == 3 ) then
+        call dagmc_setup_mesh_tally( i )
+      endif
+    enddo
+
@@ -1334,0 +1483 @@
+    real(dknd), dimension(:), pointer :: dagmc_mpi_data
@@ -1360 +1509,18 @@
-      isize = ix*iy*iz*it*ie
+      if( fm(i)%icrd /= 3 ) then
+        isize = ix*iy*iz*it*ie
+
+        call msg_get(fmtal(i)%tally,  num_items =  isize)
+        fm(i)%fmarry(:,:,:,:,:,1) = fm(i)%fmarry(:,:,:,:,:,1)+  &
+          &   fmtal(i)%tally(:,:,:,:,:,1)
+
+        call msg_get(fmtal(i)%tally,  num_items =  isize)
+        fm(i)%fmerr(:,:,:,:,:,1) = fm(i)%fmerr(:,:,:,:,:,1)+  &
+          &   fmtal(i)%tally(:,:,:,:,:,1)
+      else
+        ! DAGMC
+        call dagmc_fmesh_get_scratch_data( fm(i)%id, dagmc_mpi_data )
+        call msg_get( dagmc_mpi_data, 1, size(dagmc_mpi_data) )
+        call dagmc_fmesh_add_scratch_to_tally( fm(i)%id )
+        call msg_get( dagmc_mpi_data, 1, size(dagmc_mpi_data) )
+        call dagmc_fmesh_add_scratch_to_error( fm(i)%id )
+      endif
@@ -1362,7 +1527,0 @@
-      call msg_get(fmtal(i)%tally,  num_items =  isize)
-      fm(i)%fmarry(:,:,:,:,:,1) = fm(i)%fmarry(:,:,:,:,:,1)+  &
-        &   fmtal(i)%tally(:,:,:,:,:,1)
-
-      call msg_get(fmtal(i)%tally,  num_items =  isize)
-      fm(i)%fmerr(:,:,:,:,:,1) = fm(i)%fmerr(:,:,:,:,:,1)+  &
-        &   fmtal(i)%tally(:,:,:,:,:,1)
@@ -1387,0 +1547 @@
+    real(dknd), dimension(:), pointer :: dagmc_mpi_data
@@ -1404 +1564,2 @@
-      isize = ix*iy*iz*it*ie
+      if( fm(i)%icrd /= 3 ) then
+        isize = ix*iy*iz*it*ie
@@ -1406,2 +1567,13 @@
-      call msg_put(fm(i)%fmarry,  num_items =  isize)
-      call msg_put(fm(i)%fmerr,  num_items =  isize)
+        call msg_put(fm(i)%fmarry,  num_items =  isize)
+        call msg_put(fm(i)%fmerr,  num_items =  isize)
+
+        ! zero arrays
+        fm(i)%fmarry(:,:,:,:,:,1) = zero
+        fm(i)%fmerr(:,:,:,:,:,1) = zero
+      else
+        ! DAGMC
+        call dagmc_fmesh_get_tally_data( fm(i)%id, dagmc_mpi_data )
+        call msg_put( dagmc_mpi_data, 1, size(dagmc_mpi_data) )
+        call dagmc_fmesh_get_error_data( fm(i)%id, dagmc_mpi_data )
+        call msg_put( dagmc_mpi_data, 1, size(dagmc_mpi_data) )
+      endif
@@ -1409,3 +1580,0 @@
-      ! zero arrays
-      fm(i)%fmarry(:,:,:,:,:,1) = zero
-      fm(i)%fmerr(:,:,:,:,:,1) = zero
@@ -1413,0 +1583,5 @@
+    ! DAGMC
+    if( enable_dag_tallies ) then
+      call dagmc_fmesh_clear_data()
+    endif
+
@@ -1431,0 +1606,5 @@
+    ! DAGMC: perform end of history tasks for all dagmc mesh tallies
+    if ( enable_dag_tallies ) then
+      call dagmc_fmesh_end_history()
+    endif
+
@@ -1508,0 +1688,27 @@
+  subroutine dagmc_get_multiplier( i, erg, multiplier )
+
+    use mcnp_params, only : dknd
+    use mcnp_global, only : rho
+    use pblcom,      only : pbl
+
+    integer   , intent(in) :: i
+    real(dknd), intent(in) :: erg
+    real(dknd), intent(out) :: multiplier
+    real(dknd) :: t
+
+    t = 1._dknd
+    if( fm(i)%ifm_card/=0 ) then
+      call wtmult_fmesh(t,i)
+    endif
+    t = t*fm(i)%fmult
+    if( fm(i)%fmult < 0 ) t = -t*rho(pbl%i%icl)
+
+    multiplier = t
+    if ( fm(i)%icx == 1 ) multiplier = multiplier*erg
+    if ( fm(i)%intrpol /= 0 ) multiplier = multiplier*dosef_fmesh(erg, i)
+
+    return
+  end subroutine dagmc_get_multiplier
+
+  !-----------------------------------------------------------------------------------------
+
@@ -1539,0 +1746,4 @@
+
+    ! DAGMC
+    real(dknd) :: dagmc_multiplier
+
@@ -1552,0 +1763,13 @@
+    ! DAGMC: update multipliers if any dagmc mesh tallies exist
+    if ( enable_dag_tallies ) then
+      do i = 1, nmesh
+        call dagmc_get_multiplier(i, erg, dagmc_multiplier)
+        call dagmc_update_multiplier(i, dagmc_multiplier)
+      enddo
+    endif
+
+    ! DAGMC: compute scores for all dagmc mesh tallies
+    if ( enable_dag_track_tallies ) then
+       call dagmc_fmesh_score(ipt, x, y, z, u, v, w, erg, wgt, d, pbl%i%icl)
+    endif
+
@@ -1561,0 +1785,5 @@
+      ! DAGMC: skip iteration if dagmc mesh tally
+      if ( fm(i)%icrd == 3 ) then
+        cycle
+      endif
+
@@ -2727,0 +2956,5 @@
+    ! DAGMC: write data to file for all dagmc mesh tallies
+    if ( enable_dag_tallies ) then
+      call dagmc_fmesh_print(sp_norm)
+    endif
+
@@ -2729,0 +2963,5 @@
+      ! DAGMC: skip iteration if dagmc mesh tally
+      if( fm(j)%icrd == 3 ) then
+        cycle
+      endif
+
@@ -3909,0 +4148,7 @@
+
+    ! DAGMC: setup up dagmc mesh tallies based on fmesh index i
+    do i = 1,nmesh
+      if( fm(i)%icrd == 3 ) then
+        call dagmc_setup_mesh_tally(i)
+      endif
+    enddo
diff -rN '--unified=0' Source/src/history_neutral_high.F90 Source_dagmc/src/history_neutral_high.F90
--- Source/src/history_neutral_high.F90
+++ Source_dagmc/src/history_neutral_high.F90
@@ -119 +119,2 @@
-      if( d <= zero ) then  !  Review the need for this test.
+      ! DAGMC: use < instead of <=
+      if( d < zero ) then  !  Review the need for this test.
diff -rN '--unified=0' Source/src/hstory.F90 Source_dagmc/src/hstory.F90
--- Source/src/hstory.F90
+++ Source_dagmc/src/hstory.F90
@@ -16 +16 @@
-  use fmesh_mod, only : mesh_score, nmesh, FMESH_CALL_HISTORY
+  use fmesh_mod, only : mesh_score, nmesh, FMESH_CALL_HISTORY, enable_dag_collision_tallies
@@ -30,0 +31 @@
+  use dagmc_mod, only : isdgmc
@@ -130 +131,2 @@
-        if( lca(pbl%i%icl) < 0 )then
+        ! DAGMC: only do this when running in non-CAD mode
+        if( ( lca(pbl%i%icl) < 0 ) .and. (isdgmc == 0 ) ) then
@@ -167 +169,2 @@
-            call track(pbl%i%icl)
+            ! DAGMC: only call track here if in normal mode (NOT in CAD mode)
+            if ( isdgmc == 0 ) call track(pbl%i%icl)
@@ -228,0 +232,8 @@
+                ! DAGMC: In CAD mode, call DAGMC before forcing collision
+                if ( isdgmc == 1 ) then
+                  if ( lca(pbl%i%icl) < 0 ) call chkcel(pbl%i%icl, 3, j)
+                  call dagmc_setdis(huge_float)
+                  call track(pbl%i%icl)
+                  if ( kdb /= 0 ) exit HISTORY_LOOP
+                endif
+
@@ -282,0 +294,9 @@
+          ! DAGMC: In CAD mode, get particle information
+          if ( isdgmc == 1 ) then
+            if ( lca(pbl%i%icl) < 0 ) call chkcel(pbl%i%icl, 3, j)
+            D = min(pbl%r%dcs, pbl%r%dxl, pbl%r%dtc, deb, dw)
+            call dagmc_setdis(D)
+            call track(pbl%i%icl)
+            if ( kdb /= 0 ) exit HISTORY_LOOP
+          endif
+
@@ -529,0 +550,6 @@
+            ! DAGMC: Collision Tally
+            if ( enable_dag_collision_tallies ) then
+              call dagmc_collision_score(pbl%i%ipt, pbl%r%x, pbl%r%y, pbl%r%z, &
+                                         pbl%r%erg, pbl%r%wgt, ple, pbl%i%icl)
+            endif
+
@@ -555,0 +582,3 @@
+                  ! DAGMC
+                  if( isdgmc == 1 ) call dagmc_particle_terminate()
+
diff -rN '--unified=0' Source/src/igeom.F90 Source_dagmc/src/igeom.F90
--- Source/src/igeom.F90
+++ Source_dagmc/src/igeom.F90
@@ -13,0 +14 @@
+  use dagmc_mod, only : isdgmc
@@ -117,0 +119,3 @@
+  ! DAGMC: only call this when running in normal (non-CAD) mode
+  if ( isdgmc == 1 ) return
+
diff -rN '--unified=0' Source/src/imcn.F90 Source_dagmc/src/imcn.F90
--- Source/src/imcn.F90
+++ Source_dagmc/src/imcn.F90
@@ -27,0 +28 @@
+  use dagmc_mod, only : isdgmc, dagmc_distlimit, dagmc_usecad, dagmc_overlap_thickness, dagmc_srcmode
@@ -1492,0 +1494,5 @@
+
+    ! Initialize DAGMC
+    if ( isdgmc == 1 ) then  ! set DAGMC parameters from idum & rdum
+      call dagmc_set_settings(dagmc_distlimit, dagmc_usecad, dagmc_overlap_thickness, dagmc_srcmode)
+    endif
diff -rN '--unified=0' Source/src/itally.F90 Source_dagmc/src/itally.F90
--- Source/src/itally.F90
+++ Source_dagmc/src/itally.F90
@@ -31,0 +32 @@
+  use dagmc_mod, only : isdgmc
@@ -205,0 +207,7 @@
+
+        ! DAGMC: If in CAD mode, skip up until line prior to marker 40
+        if ( isdgmc == 1 ) then
+          itds(li+i) = k
+          goto 40
+        endif
+
diff -rN '--unified=0' Source/src/main.F90 Source_dagmc/src/main.F90
--- Source/src/main.F90
+++ Source_dagmc/src/main.F90
@@ -58 +58 @@
-    & msub, outp
+    & msub, outp, gcad, lcad, fcad, ftol
@@ -62 +62,2 @@
-    
+  use dagmc_mod, only : isdgmc, dagmc_geom_file_mode, DGFM_READ
+
@@ -64 +65 @@
-  use mcnp_env, only : HDPTH0, KOD, LODDAT, VER
+  use mcnp_env, only : hdpth0, kod, loddat, ver
@@ -78,0 +80 @@
+  use dagmc_mod, only : init_dagmc, dagmc_version_heading
@@ -199,0 +202,18 @@
+
+  ! DAGMC: initialize a DAGMC run if specified
+  if ( gcad /= ' ' ) then
+    isdgmc = 1
+    if (mcnp_opt_mpi) dagmc_geom_file_mode = DGFM_READ;
+  else
+    ! Error checking for user specifying worthless files
+    if( lcad /= ' ' ) then
+      call expire(0, 'main', 'CAD list file specified without a geometry file.')
+    endif
+    if( fcad /= ' ' ) then
+      call expire(0, 'main', 'CAD facet file specified without a geometry file.')
+    endif
+    if( ftol /= ' ' ) then
+      call expire(0, 'main', 'Facet tolerance specified without a geometry file.')
+    endif
+  endif
+
@@ -247,0 +268,5 @@
+  ! DAGMC
+  if ( isdgmc == 1 ) then
+    call init_dagmc
+  endif
+
@@ -263,0 +289,3 @@
+
+  ! DAGMC
+  if (isdgmc == 1) call dagmc_version_heading( iuo )
diff -rN '--unified=0' Source/src/mcnp_env.F90 Source_dagmc/src/mcnp_env.F90
--- Source/src/mcnp_env.F90
+++ Source_dagmc/src/mcnp_env.F90
@@ -0,0 +1,14 @@
+
+  module mcnp_env
+    !
+    ! code & environment info for mcnp
+    !
+
+    character(len=8), parameter ::  kod            = KODE
+    character(len=5), parameter ::  ver            = VERS
+    character(len=20),parameter ::  thread         = THREAD
+    character(len=20),parameter ::  thread_version = TVERS
+    character(len=8), parameter ::  loddat         = LODDAT
+    character(len=80),parameter ::  hdpth0         = DPATH
+
+  end module mcnp_env
diff -rN '--unified=0' Source/src/mcnp_input.F90 Source_dagmc/src/mcnp_input.F90
--- Source/src/mcnp_input.F90
+++ Source_dagmc/src/mcnp_input.F90
@@ -25 +25 @@
-  integer,parameter, public :: nkcd   = 149     != Number of different types of input cards.
+  integer,parameter, public :: nkcd   = 150     != Number of different types of input cards.
@@ -226,0 +227,4 @@
+  ! DAGMC card keywords, input values
+    character(len=18), dimension(4), parameter, public :: &
+      & hdagmc = (/ 'check_src_cell    ', 'usecad            ', &
+      &             'distlimit         ', 'overlap_thickness ' /)
@@ -389,0 +394,2 @@
+  ! DAGMC cards
+  data cnm(150),(krq(i,150),i=1,7)/ 'dagmc',0,0, 0,0, 0,              12,0 /
diff -rN '--unified=0' Source/src/mcnp_iofiles.F90 Source_dagmc/src/mcnp_iofiles.F90
--- Source/src/mcnp_iofiles.F90
+++ Source_dagmc/src/mcnp_iofiles.F90
@@ -48 +48,5 @@
-    &  dumn2
+    &  dumn2,  &
+    &  gcad,   &     ! gcad    - DAGMC geometry input file (CAD or facets)
+    &  lcad,   &     ! lcad    - DAGMC input log file
+    &  fcad,   &     ! fcad    - DAGMC facets output file
+    &  ftol          ! ftol    - DAGMC faceting tolerance
@@ -97,0 +102,4 @@
+    gcad    = isub(26)  ! DAGMC
+    lcad    = isub(27)  ! DAGMC
+    fcad    = isub(28)  ! DAGMC
+    ftol    = isub(29)  ! DAGMC
@@ -129,0 +138,4 @@
+      gcad(i:i)   = ' '  ! DAGMC
+      lcad(i:i)   = ' '  ! DAGMC
+      fcad(i:i)   = ' '  ! DAGMC
+      ftol(i:i)   = ' '  ! DAGMC
@@ -159,0 +172,4 @@
+    msub(26)(1:8) = 'gcad    '  ! DAGMC
+    msub(27)(1:8) = 'lcad    '  ! DAGMC
+    msub(28)(1:8) = 'fcad    '  ! DAGMC
+    msub(29)(1:8) = 'ftol    '  ! DAGMC
diff -rN '--unified=0' Source/src/mcnp_params.F90 Source_dagmc/src/mcnp_params.F90
--- Source/src/mcnp_params.F90
+++ Source_dagmc/src/mcnp_params.F90
@@ -216,0 +217 @@
+  integer, parameter, public :: iulc    = 79  != I/O unit for DAGMC log file
diff -rN '--unified=0' Source/src/msgcon.F90 Source_dagmc/src/msgcon.F90
--- Source/src/msgcon.F90
+++ Source_dagmc/src/msgcon.F90
@@ -77,0 +78 @@
+  use dagmc_mod,           only: dagmc_msgbcast
@@ -298,0 +300,4 @@
+
+  ! DAGMC
+  write(jtty,*) "master sending DAGMC information..."
+  call dagmc_msgbcast
diff -rN '--unified=0' Source/src/msgtsk.F90 Source_dagmc/src/msgtsk.F90
--- Source/src/msgtsk.F90
+++ Source_dagmc/src/msgtsk.F90
@@ -71,0 +72 @@
+  use dagmc_mod,         only: dagmc_msgbcast
@@ -249,0 +251,4 @@
+
+  ! DAGMC
+  call dagmc_msgbcast
+
diff -rN '--unified=0' Source/src/namchg.F90 Source_dagmc/src/namchg.F90
--- Source/src/namchg.F90
+++ Source_dagmc/src/namchg.F90
@@ -11,0 +12 @@
+  use dagmc_mod, only : isdgmc
@@ -29 +30,4 @@
-  if( mm==2 ) then
+  ! DAGMC: Need to change some of these conditionals, no bounding
+  !        surfaces exist in CAD mode, handle as regular surface
+
+  if( ( mm==2 ) .or. ( ( mm == 3) .and. ( isdgmc == 1 ) ) ) then
@@ -34 +38 @@
-  elseif( mm==3 ) then
+  elseif( ( mm==3 ) .and. ( isdgmc == 0 ) ) then
diff -rN '--unified=0' Source/src/newcel.F90 Source_dagmc/src/newcel.F90
--- Source/src/newcel.F90
+++ Source_dagmc/src/newcel.F90
@@ -18,0 +19 @@
+  use dagmc_mod, only : isdgmc
@@ -52,0 +54,14 @@
+  ! DAGMC: move this to the top
+  found_surface_crossed = .false.
+
+  ! DAGMC: In CAD mode, call MOAB version of this
+  if ( isdgmc == 1 ) then
+    if ( cs /= 0 ) cs = angl()
+    call dagmcnewcel(pbl%i%jsu, pbl%i%icl, pbl%i%iap)
+    if ( mxa == -1 ) then
+      kdb = 1
+    else
+      found_surface_crossed = .true.
+    endif
+  endif
+
@@ -78 +92,0 @@
-  found_surface_crossed = .false.
diff -rN '--unified=0' Source/src/nextit.F90 Source_dagmc/src/nextit.F90
--- Source/src/nextit.F90
+++ Source_dagmc/src/nextit.F90
@@ -57 +57 @@
-    & surface_card, NUM_SURFACE_TYPES, length_spf
+    & surface_card, NUM_SURFACE_TYPES, length_spf, hdagmc
@@ -66,0 +67 @@
+  use dagmc_mod, only: dagmc_srcmode, dagmc_usecad, dagmc_distlimit, dagmc_overlap_thickness
@@ -2293,0 +2295,3 @@
+              ! DAGMC
+              elseif( hitm(1:3) == 'dag' ) then
+                fm(nmesh)%icrd=3
@@ -2934,0 +2939,21 @@
+
+      case( 'dagmc' )
+        !  >>>>>  DAGMC parameters                                                                dagmc
+        !  Modeled after RAND (99)
+        !  m1c=index of current dagmc keyword.
+        if( m1c == 0 ) then
+          if( index(',=', hitm(1:1)) == 0 ) then
+            do m1c = 1,4
+              if( hitm(1:18) == hdagmc(m1c) ) return
+            enddo
+            m1c = 0
+          endif
+        else
+          if( index(',=',hitm(1:1))==0 ) then
+            if( m1c==1 .and. ( hitm(1:2) == 'of' .or. hitm(1:2) == 'no' ) )  dagmc_srcmode = 1
+            if( m1c==2 .and. ( hitm(1:2) == 'on' .or. hitm(1:2) == 'ye' ) )  dagmc_usecad = 1
+            if( m1c==3 .and. ( hitm(1:2) == 'on' .or. hitm(1:2) == 'ye' ) )  dagmc_distlimit = 1
+            if( m1c==4 )  dagmc_overlap_thickness = ritm
+            m1c = 0
+          endif
+        endif
diff -rN '--unified=0' Source/src/oldcrd.F90 Source_dagmc/src/oldcrd.F90
--- Source/src/oldcrd.F90
+++ Source_dagmc/src/oldcrd.F90
@@ -28,0 +29 @@
+  use dagmc_mod, only : isdgmc
@@ -70 +71,2 @@
-      if( lca(mxa) == nlja + 1 ) then
+      ! DAGMC: In CAD mode, cells should have no surfaces
+      if( ( lca(mxa)==nlja + 1 ) .and. ( isdgmc == 0 ) ) then
@@ -80,0 +83,3 @@
+    ! DAGMC: Break out of subroutine here in CAD mode
+    if ( isdgmc == 1 ) return
+
@@ -1401,0 +1407,7 @@
+
+        ! DAGMC: skip handling imesh/jmesh/kmesh/orig when geom=DAG; check emesh before jump
+        if( ifmsh(13) == 0 ) then
+          ientmp(1:ifmsh(12)) = 1
+        endif
+        if( fm(nmesh)%icrd==3 ) goto 4900
+
@@ -1414,3 +1426,4 @@
-        if( ifmsh(13) == 0 ) then
-          ientmp(1:ifmsh(12)) = 1
-        endif
+        ! DAGMC: comment this out
+        ! if( ifmsh(13) == 0 ) then
+        !   ientmp(1:ifmsh(12)) = 1
+        ! endif
@@ -1585,0 +1599 @@
+4900 continue ! DAGMC jump target
diff -rN '--unified=0' Source/src/pass0.F90 Source_dagmc/src/pass0.F90
--- Source/src/pass0.F90
+++ Source_dagmc/src/pass0.F90
@@ -15,0 +16 @@
+  use dagmc_mod, only : isdgmc, lcadrd
@@ -23,0 +25,3 @@
+
+  ! DAGMC: For CAD mode, read cell/surface cards from log file
+  if ( isdgmc == 1 ) call lcadrd
diff -rN '--unified=0' Source/src/pblcom.F90 Source_dagmc/src/pblcom.F90
--- Source/src/pblcom.F90
+++ Source_dagmc/src/pblcom.F90
@@ -189,0 +190 @@
+    use dagmc_mod, only : isdgmc
@@ -214,0 +216,5 @@
+    ! DAGMC: save this particle's ray history
+    if (isdgmc == 1) then
+      call dagmc_savpar(n)
+    endif
+
@@ -382,0 +389 @@
+    use dagmc_mod, only : isdgmc
@@ -398,0 +406,5 @@
+
+    ! DAGMC: Restore the ray history associated with this particle
+    if ( isdgmc == 1 ) then
+      call dagmc_getpar(n)
+    endif
diff -rN '--unified=0' Source/src/reflec.F90 Source_dagmc/src/reflec.F90
--- Source/src/reflec.F90
+++ Source_dagmc/src/reflec.F90
@@ -17,0 +18 @@
+  use dagmc_mod, only : isdgmc
@@ -106,0 +108,3 @@
+
+  ! DAGMC:
+  if( isdgmc == 1 ) call dagmc_surf_reflection( pbl%r%u, pbl%r%v, pbl%r%w, 0 )
diff -rN '--unified=0' Source/src/sourcb.F90 Source_dagmc/src/sourcb.F90
--- Source/src/sourcb.F90
+++ Source_dagmc/src/sourcb.F90
@@ -21,0 +22 @@
+  use dagmc_mod, only : isdgmc, dagmc_srcmode
@@ -742 +743,8 @@
-          call chkcel(ji,0,j)
+
+          ! DAGMC: if dagmc_srcmode is on, skip chkcel and assume particle is in user-specified cell
+          if( isdgmc==1 .and. dagmc_srcmode==1 ) then
+            j = 0
+          else
+            call chkcel(ji,0,j)
+          endif
+
diff -rN '--unified=0' Source/src/startp.F90 Source_dagmc/src/startp.F90
--- Source/src/startp.F90
+++ Source_dagmc/src/startp.F90
@@ -54,0 +55 @@
+  use dagmc_mod, only : isdgmc
@@ -124,0 +126,6 @@
+
+  ! DAGMC: nbnk = 0
+  if ( isdgmc == 1 ) then
+    call dagmc_bank_clear
+  endif
+
diff -rN '--unified=0' Source/src/tally.F90 Source_dagmc/src/tally.F90
--- Source/src/tally.F90
+++ Source_dagmc/src/tally.F90
@@ -36,0 +37 @@
+  use dagmc_mod, only : isdgmc
@@ -426,0 +428,4 @@
+
+    ! DAGMC: If in CAD mode, make sure distance to physics collision is initialized
+    if ( isdgmc == 1 ) call dagmc_setdis(huge_float)
+
diff -rN '--unified=0' Source/src/track.F90 Source_dagmc/src/track.F90
--- Source/src/track.F90
+++ Source_dagmc/src/track.F90
@@ -20,0 +21,2 @@
+  use varcom, only : nps
+  use dagmc_mod, only : isdgmc
@@ -61,0 +64,8 @@
+  endif
+
+  ! DAGMC: If in CAD mode, call DAGMC version of track instead
+  if ( isdgmc == 1 ) then
+    call dagmctrack(ih, pbl%r%u, pbl%r%v, pbl%r%w, pbl%r%x, pbl%r%y, pbl%r%z, &
+     &              huge_float, pbl%r%dls, jap, pbl%i%jsu, nps)
+    if ( pbl%r%dls == huge_float ) kdb = 2
+    return
diff -rN '--unified=0' Source/src/transm.F90 Source_dagmc/src/transm.F90
--- Source/src/transm.F90
+++ Source_dagmc/src/transm.F90
@@ -16,0 +17 @@
+  use dagmc_mod, only : isdgmc
@@ -88,0 +90,3 @@
+
+    ! DAGMC: If in CAD mode, call dagmc_setdis first
+    if ( isdgmc == 1 ) call dagmc_setdis( dd - sd )
diff -rN '--unified=0' Source/src/volume.F90 Source_dagmc/src/volume.F90
--- Source/src/volume.F90
+++ Source_dagmc/src/volume.F90
@@ -9 +9 @@
-  use fixcom, only : ink, msd, mxa, ntal, mipt_mode, mipt_locct
+  use fixcom, only : ink, msd, mxa, ntal, mipt_mode, mipt_locct, mxj
@@ -25,0 +26 @@
+  use dagmc_mod, only : isdgmc
@@ -37,0 +39,6 @@
+
+  ! DAGMC: In CAD mode, circumvent most of this function and call DAGMC version
+  if (isdgmc == 1) then
+    call dagmcvolume(mxa, vols, mxj, aras)
+    goto 260
+  endif
