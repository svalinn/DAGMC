diff -rupN Source-orig/dotcomm/.gitignore Source/dotcomm/.gitignore
--- Source-orig/dotcomm/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ Source/dotcomm/.gitignore	2016-03-18 17:40:17.784223188 -0500
@@ -0,0 +1,3 @@
+*
+!.gitignore
+!CMakeLists.txt
diff -rupN Source-orig/.gitignore Source/.gitignore
--- Source-orig/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ Source/.gitignore	2016-03-18 17:40:17.792223117 -0500
@@ -0,0 +1,5 @@
+*
+!.gitignore
+!CMakeLists.txt
+!src
+!dotcomm
diff -rupN Source-orig/src/angl.F90 Source/src/angl.F90
--- Source-orig/src/angl.F90	2016-03-17 22:16:23.000000000 -0500
+++ Source/src/angl.F90	2016-03-18 17:40:17.792223117 -0500
@@ -9,11 +9,19 @@ function angl()
   ! Modules used:
   use mcnp_global
   use mcnp_debug
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
   integer :: ij = 0 ! local jsu error counter
   integer :: is = 0 ! local surface error counter
 
+  ! DAGMC: In CAD mode, circumvent entire function and call DAGMC version instead
+  if (isdgmc == 1) then
+     call dagmcangl(jsu,xxx,yyy,zzz,ang)
+     angl=max(-one,min(one,ang(1)*uuu+ang(2)*vvv+ang(3)*www))
+     return
+  endif
+
   ! initialize angl so that angl doesn't get underflow or overflow
   angl=one
 
diff -rupN Source-orig/src/celsrf.F90 Source/src/celsrf.F90
--- Source-orig/src/celsrf.F90	2016-03-17 22:16:23.000000000 -0500
+++ Source/src/celsrf.F90	2016-03-18 17:40:17.792223117 -0500
@@ -10,6 +10,7 @@ subroutine celsrf
   use mcnp_debug
   use mcnp_input
   use erprnt_mod
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
   character hj(2,3)*10, hl*5, hp*130, hq*2, ht*4
@@ -307,6 +308,10 @@ subroutine celsrf
 470 continue
   jp = 0
   DO_500: do j=1,mxj
+
+    ! DAGMC: Skip this loop if in DAGMC mode
+    if (isdgmc == 1) exit
+
     if( idns(j)/=0 )  cycle DO_500
     if( ksm(j)/=0  )  cycle DO_500
     if( ksu(j)>0   )  jp=1
diff -rupN Source-orig/src/chkcel.F90 Source/src/chkcel.F90
--- Source-orig/src/chkcel.F90	2016-03-17 22:16:23.000000000 -0500
+++ Source/src/chkcel.F90	2016-03-18 17:40:17.792223117 -0500
@@ -20,10 +20,18 @@ subroutine chkcel(i1,m,j)
   ! Modules used:
   use mcnp_global
   use mcnp_debug
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
   integer :: j,k,ie=0
 
+  ! DAGMC: In CAD mode, circumvent this function and call DAGMC version instead
+  if ( isdgmc == 1 .and. (m == 0 .or. m==2) ) then
+     call dagmcchkcel(lev,uuu,vvv,www,xxx,yyy,zzz,dls,jap, &
+          &               jsu,icl,iap,mxa,i1,j)
+     return
+  endif
+  
   ! Do all surfaces of cell i1 or until mm is matched.
   j2 = abs(lca(i1))
   iL = j2-lca(i1)+m
diff -rupN Source-orig/src/dagmc_mod.F90 Source/src/dagmc_mod.F90
--- Source-orig/src/dagmc_mod.F90	1969-12-31 18:00:00.000000000 -0600
+++ Source/src/dagmc_mod.F90	2016-03-18 17:40:17.792223117 -0500
@@ -0,0 +1,253 @@
+module dagmc_mod
+
+  use mcnp_params
+
+  integer, parameter, public :: & ! named constant for file distribution mode
+     & DGFM_SEQ   = 0, &
+     & DGFM_READ  = 1, & 
+     & DGFM_BCAST = 2 
+
+  integer, save :: isdgmc 
+
+  integer, save :: dagmc_geom_file_mode = DGFM_SEQ  ! default to a distributed read
+
+  integer, save :: dagmc_srcmode = 0
+  integer, save :: dagmc_usecad  = 0
+  integer, save :: dagmc_distlimit = 0
+  
+  real(dknd), save :: dagmc_facet_tol
+  real(dknd), save :: dagmc_overlap_thickness
+  real(dknd), save :: dagmc_version
+  
+  integer, save :: dagmc_subversion
+
+  public :: &
+    &   lcadrd, &        ! read log file information
+    &   dagmc_msgput, &  ! share dagmc settings to slave tasks
+    &   dagmc_msgget    ! receive dagmc settings from master task
+
+contains
+
+  subroutine lcadrd
+    ! Description:
+    ! Reads in the CAD log file and "inserts" it at the header
+    ! of the input file.
+    
+    ! >>>>> Modules used
+    use mcnp_global
+    use mcnp_params
+    use mcnp_iofiles
+    
+    ! >>>>> Implict declaration of real variables as doubles
+    implicit real(dknd) (a-h,o-z)
+    
+    ! >>>>> Other variables
+    character(len=80)  :: hk          ! Character for line of file being read
+    integer, parameter :: ie = 70     ! I/O index of a scratch file
+    integer            :: it, iu = 0  ! Indices for nxtsym function
+    integer            :: ios = 0     ! IOSTAT for file reading
+    
+    ! >>>>> Initialize the scratch file and get to beginning of input file
+    open(ie,status='scratch')
+    rewind iui
+    
+    ! >>>>> Check if first line is message block, otherwise assume a title card
+    read(iui,'(a80)',end=1000) hk
+    call nxtsym(hk,' ',1,it,iu,1)
+    
+    if (hk(it:iu) == 'message:') then
+       ! Message block exists, read until blank line found
+       do
+          read(iui,'(a80)',end=1000) hk   ! Read in string: exception for eof
+          if (hk == ' ') exit             ! Terminate loop once blank line found 
+       enddo
+       ! Read in title card, for message block case
+       read(iui,'(a80)',end=1000) hk
+    endif
+    
+    ! Write title card to scratch file
+    write(ie,'(a80)') hk
+    
+    ! >>>>> Read in cell/surface cards from log
+    rewind iulc
+    do
+       read(iulc, '(a80)', iostat=ios) hk
+       
+       ! Check for end of file or errors
+       if (ios == 0) then
+          write(ie,'(a80)') hk     ! Write the line normally
+       elseif (ios < 0) then
+          exit                     ! Break loop at EOF
+       else
+          goto 2000                ! Exception for severe I/O error
+       endif
+    enddo
+    
+    ! >>>> Read in rest of input file
+    ios = 0
+    do
+       read(iui, '(a80)', iostat = ios) hk
+       
+       ! Check for end of file or errors
+       if (ios == 0) then
+          write(ie,'(a80)') hk     ! Write the line to scratch file
+       elseif (ios < 0) then
+          exit                     ! Break loop at EOF
+       else
+          goto 3000                ! Exception for severe I/O error
+       endif
+    enddo
+    
+    ! >>>>> Echo back to new scratch input file
+    close(iui)
+    rewind ie
+    open(iui,status='scratch')
+    ios = 0
+    do      
+       read(ie, '(a80)', iostat = ios) hk
+       
+       ! Check for end of file or errors
+       if (ios == 0) then
+          write(iui,'(a80)') hk    ! Write the line in the scratch input file
+       elseif (ios < 0) then
+          exit                     ! Break loop at EOF
+       else
+          goto 4000                ! Exception for severe I/O error
+       endif
+       
+    enddo
+    
+    ! >>>>> Finish up
+    rewind iui
+    ! pass1 expects iui to be advanced beyond the title card, 
+    ! so read past the first line now
+    read(iui, '(a)')
+
+    close(ie)
+    return
+    
+    ! >>>>> Exceptions
+    ! End of File at header of input file
+1000 call expire(0,'lcadrd','unexpected eof in file '//inp)
+    return
+    ! Severe I/O error during reading of CAD log
+2000 call expire(0,'lcadrd','error during read of file '//lcad)
+    return
+    ! Severe I/O error during reading of CAD log
+3000 call expire(0,'lcadrd','error during read of file '//inp)
+    return
+    ! Severe I/O error during echo of scratch file to new input file
+4000 call expire(0,'lcadrd','error stitching input and CAD log')
+    return
+    
+  end subroutine lcadrd
+
+  subroutine dagmc_msgput
+
+    use messages, only : msg_put
+    use mcnp_iofiles, only: gcad, ftol
+    use fixcom, only : ntal
+    use mcnp_debug
+
+    call msg_put (isdgmc)
+    call msg_put (dagmc_geom_file_mode)
+    call msg_put (gcad)
+    call msg_put (ftol)
+    call msg_put (dagmc_srcmode)
+    call msg_put (dagmc_usecad)
+    call msg_put (dagmc_distlimit)
+    call msg_put (dagmc_overlap_thickness)
+    call msg_put (dagmc_facet_tol)
+    call msg_put (dagmc_version)
+
+  end subroutine dagmc_msgput
+
+  subroutine dagmc_msgget
+   
+    use messages, only : msg_get
+    use mcnp_iofiles, only: gcad, ftol
+    use fixcom, only : ntal
+    use mcnp_debug
+
+    implicit none
+
+    real(dknd) :: master_dagmc_version
+
+    call msg_get (isdgmc)
+    call msg_get (dagmc_geom_file_mode)
+    call msg_get (gcad)
+    call msg_get (ftol)
+    call msg_get (dagmc_srcmode)
+    call msg_get (dagmc_usecad)
+    call msg_get (dagmc_distlimit)
+    call msg_get (dagmc_overlap_thickness)
+    call msg_get (dagmc_facet_tol)
+    call msg_get (master_dagmc_version)
+
+    if ( isdgmc == 1 ) then
+       call dagmcinit(gcad//char(0),len_trim(gcad),      &
+          &           ftol//char(0),len_trim(ftol),      &
+          &           dagmc_geom_file_mode, dagmc_version, dagmc_subversion )
+       if (dagmc_version /= master_dagmc_version) then
+          ! errprt and fail!
+       end if
+       call dagmc_set_settings(dagmc_distlimit, dagmc_usecad, dagmc_overlap_thickness, dagmc_srcmode )
+    end if
+
+  end subroutine dagmc_msgget
+  
+  subroutine init_dagmc
+
+     use mcnp_iofiles
+
+     ! Check to see if the CAD file exists, if not, abort
+     inquire( file = gcad, exist = file_exists)
+     if (.not.file_exists) then
+        call expire(0,'main','CAD geometry file '//gcad// &
+             &            ' does not exist.')
+     endif
+     
+     ! initialize DAGMC, read geometry and initialize OBBTree
+     call dagmcinit(gcad//char(0),len_trim(gcad),      &
+          &         ftol//char(0),len_trim(ftol),      &
+          &         dagmc_geom_file_mode,dagmc_version, dagmc_subversion )
+
+
+     call dagmc_init_settings(dagmc_distlimit, dagmc_usecad, &
+                              dagmc_overlap_thickness, dagmc_facet_tol, dagmc_srcmode)
+
+     ! print version number message to terminal
+     call dagmc_version_heading(jtty)
+
+     ! write mesh file if requested
+     if ( len_trim(fcad) .gt. 0) then
+        call dagmcwritefacets(fcad//char(0),len_trim(fcad))     
+     endif
+
+
+     ! parse metadata and write input cards
+     call dagmcwritemcnp(lcad//char(0), len_trim(lcad))
+     
+     ! Check to ensure that the log file is written
+     inquire( file = lcad, exist = file_exists)
+     if (.not.file_exists) then
+        call expire(0,'main','CAD list file '//lcad// &
+             &             ' not written by DAGMC.')
+     endif
+     
+     ! Open the cad log file on the MCNP side
+     open( unit=iulc, file=lcad, status='old' )
+
+  end subroutine init_dagmc
+
+  ! write DagMC version number message to given file
+  subroutine dagmc_version_heading(o)
+    
+    integer :: o 
+
+     write(o,150) dagmc_version, dagmc_subversion
+150  format(1x,'This problem is using DAGMC version ',f8.3,' w/ DagMC r', i4)
+
+  end subroutine dagmc_version_heading
+
+end module dagmc_mod
diff -rupN Source-orig/src/dbmin.F90 Source/src/dbmin.F90
--- Source-orig/src/dbmin.F90	2016-03-17 22:16:23.000000000 -0500
+++ Source/src/dbmin.F90	2016-03-18 17:40:17.792223117 -0500
@@ -9,9 +9,21 @@ function dbmin()
 
   use mcnp_global
   use mcnp_debug
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
 
+  ! DAGMC: Explicitly declare variable for return value for inter-language call
+  real(dknd) :: dbmin_retval = zero
+
+  ! DAGMC: In CAD mode, call MOAB version instead
+  if ( isdgmc == 1 ) then
+     call dagmcdbmin(icl,xxx,yyy,zzz,huge_float,dbmin_retval)
+     dbmin = dbmin_retval
+     return
+  endif
+
+
   dbmin = huge_float
   ic = icl
   x0 = xxx
diff -rupN Source-orig/src/electr.F90 Source/src/electr.F90
--- Source-orig/src/electr.F90	2016-03-17 22:16:23.000000000 -0500
+++ Source/src/electr.F90	2016-03-18 17:40:17.792223117 -0500
@@ -9,6 +9,7 @@ subroutine electron_history_4c3
   use mcnp_debug
   use mcnp_landau, only: esloss
   use fmesh_mod, only:  mesh_score, nmesh
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
 
@@ -82,6 +83,12 @@ subroutine electron_history_4c3
           call chkcel(icl,3,j)
         endif
 
+        ! DAGMC: In DAGMC mode, use the known physics distance to limit geometry search
+        if ( isdgmc == 1 ) then
+           d = min(dtc,pmf)
+           call dagmc_setdis(d)
+        endif
+
         call track(icl)
         if( kdb/=0 )  go to 999 ! Return
         jsu = jap
diff -rupN Source-orig/src/fmesh_mod.F90 Source/src/fmesh_mod.F90
--- Source-orig/src/fmesh_mod.F90	2016-03-17 22:16:23.000000000 -0500
+++ Source/src/fmesh_mod.F90	2016-03-18 17:40:17.792223117 -0500
@@ -126,6 +126,18 @@ CONTAINS
 
   !-----------------------------------------------------------------------------------------
 
+  ! DAGMC: Helper function - create a valid Fortran pointer from a C array and a length 
+  subroutine dagmc_make_fortran_pointer( fref, carray, size )
+    implicit none
+
+    integer :: size ! The size (in doubles) of the array in C
+    real(dknd), dimension(size), target :: carray ! The C pointer
+    real(dknd), dimension(:), pointer :: fref     ! The returned Fortran pointer
+
+    fref => carray
+
+  end subroutine dagmc_make_fortran_pointer
+
   subroutine fmesh_runtpw(iu)
     !  subroutine to write mesh tallies to the RUNTPE
 
diff -rupN Source-orig/src/.gitignore Source/src/.gitignore
--- Source-orig/src/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ Source/src/.gitignore	2016-03-18 17:40:17.788223153 -0500
@@ -0,0 +1,3 @@
+*
+!.gitignore
+!CMakeLists.txt
diff -rupN Source-orig/src/hstory.F90 Source/src/hstory.F90
--- Source-orig/src/hstory.F90	2016-03-17 22:16:23.000000000 -0500
+++ Source/src/hstory.F90	2016-03-18 17:40:17.792223117 -0500
@@ -16,6 +16,7 @@ subroutine hstory
   use c_interfaces
 #endif
   use fmesh_mod, only: mesh_end_history, mesh_score, nmesh
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
   real(dknd)       :: sr(3), sd(3)
@@ -79,7 +80,8 @@ subroutine hstory
   endif
 
   ! Calculate the distance to the cell boundary, dls.
-   if( lca(icl)<0 ) then
+  ! DAGMC: only do this when running in non-CAD mode
+  if( lca(icl)<0 .and. (isdgmc == 0) ) then
      call chkcel(icl,3,j)
    endif
 50 continue
@@ -90,7 +92,8 @@ subroutine hstory
     endif
     call expirx(1,'hstory','the weight of the current particle is zero or less.')
   endif
-  call track(icl)
+  ! DAGMC: only call track here if in normal mode (NOT in CAD mode)
+  if (isdgmc == 0) call track(icl)
   if( kdb/=0 )  go to 390
 
   ! Calculate the distance to the nearest dxtran sphere, dxl.
@@ -147,6 +150,14 @@ subroutine hstory
         ! Sample the distance to collision, pmf, normally.
         pmf = -log(rang())*gs
       else
+        ! DAGMC: In CAD mode, call DAGMC before forcing collision
+        if ( isdgmc == 1 ) then
+           if ( lca(icl) < 0 ) call chkcel(icl,3,j)
+           call dagmc_setdis(huge_float)
+           call track(icl)
+           if ( kdb /= 0 ) goto 390
+        endif
+         
         ! Force a collision.
         call forcol
         if( kdb/=0  )  go to 390
@@ -160,6 +171,16 @@ subroutine hstory
   ! Banked uncollided forced collision part comes back here.
   ! 1 mfp mesh-based weight window check survivors come back here.
 90 continue
+
+  ! DAGMC: In CAD mode, get particle information
+  if ( isdgmc == 1 ) then
+     if (lca(icl) < 0) call chkcel(icl,3,j)
+     d = min( pmf, dxl, dtc, deb, dw )
+     call dagmc_setdis(d)
+     call track(icl)
+     if ( kdb /= 0 ) goto 390
+  endif
+
   d = min( pmf, dls, dxl, dtc, deb, dw )
 
   ! Adjust the weight for exponential transformation.
diff -rupN Source-orig/src/igeom.F90 Source/src/igeom.F90
--- Source-orig/src/igeom.F90	2016-03-17 22:16:23.000000000 -0500
+++ Source/src/igeom.F90	2016-03-18 17:40:17.792223117 -0500
@@ -7,6 +7,7 @@ subroutine igeom
   use mcnp_debug
   use mcnp_input
   use erprnt_mod
+  use dagmc_mod
 #if defined(VISED) && defined(DEC)
   use c_interfaces
 #endif
@@ -69,7 +70,8 @@ subroutine igeom
 
   ! expand # operators and check the cells and surfaces.
 80 continue
-  call chekcs
+  ! DAGMC: only call this when running in normal (non-CAD) mode
+  if (isdgmc == 0) call chekcs
 
   ! calculate the constants of any lattices in the geometry.
   if( nlat/=0 ) then
diff -rupN Source-orig/src/imcn.F90 Source/src/imcn.F90
--- Source-orig/src/imcn.F90	2016-03-17 22:16:23.000000000 -0500
+++ Source/src/imcn.F90	2016-03-18 17:40:17.792223117 -0500
@@ -12,6 +12,7 @@ subroutine imcn
   use rmc_mod
   use crit1_mod
   use fmesh_mod, only: nmesh, fmesh_initialize
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
 
@@ -422,6 +423,11 @@ contains
       &                   new_stride       = RN_stride_input,  &
       &                   new_part1        = RN_hist_input     )
 
+    ! Initialize DAGMC
+    if (isdgmc == 1) then   ! set DAGMC parameters from idum & rdum
+      call dagmc_set_settings(dagmc_distlimit, dagmc_usecad, dagmc_overlap_thickness, dagmc_srcmode)
+    endif
+
     if( uran_n>0 ) then
       write(jtty,17) (uran_univ(j),(uran_xyz(i,j),i=1,3),j=1,uran_n)
 17    format(1x,/, &
diff -rupN Source-orig/src/itally.F90 Source/src/itally.F90
--- Source-orig/src/itally.F90	2016-03-17 22:16:23.000000000 -0500
+++ Source/src/itally.F90	2016-03-18 17:40:17.792223117 -0500
@@ -17,6 +17,7 @@ subroutine itally
   use mcnp_input
   use fmesh_mod,  only:  nmesh
   use erprnt_mod
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
   character(len=1) :: h
@@ -89,6 +90,13 @@ subroutine itally
         j = rtp(ipnt(1,7+m,ital)-1+i)
         k = namchg(2*m-1,j)
         if( k==0 ) go to 40
+
+        ! DAGMC: If in CAD mode, skip up until line prior to marker 40
+        if ( isdgmc == 1 ) then
+          itds(li+i) = k
+          goto 40
+        endif
+
         ! if macrobody identical surface, use master surface number.
         if( m==2 ) then
           ! check if a bounding surface, include facet if macrobody.
diff -rupN Source-orig/src/main.F90 Source/src/main.F90
--- Source-orig/src/main.F90	2016-03-17 22:16:23.000000000 -0500
+++ Source/src/main.F90	2016-03-18 17:40:17.792223117 -0500
@@ -53,6 +53,7 @@ program main
   use crit2_mod
   use ra1_mod
   use ra2_mod
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
 
@@ -142,6 +143,31 @@ program main
   endif
 
   call exemes
+
+  ! DAGMC: initialize a DAGMC run if specified
+  if (gcad /= ' ') then
+     isdgmc = 1
+     
+     if (mcnp_opt_multp) dagmc_geom_file_mode = DGFM_READ;
+
+  else
+     
+     ! Error checking for user specifying worthless files
+     if(lcad /= ' ') then
+        call expire(0,'main','CAD list file specified &
+             &   without a geometry file.')
+     endif
+     if(fcad /= ' ') then
+        call expire(0,'main','CAD facet file specified &
+             &   without a geometry file.')
+     endif
+     if(ftol /= ' ') then
+        call expire(0,'main','Facet tolerance specified &
+             &   without a geometry file.')
+     endif
+     
+  endif
+  
   if( konrun==0 )  probid = idtm
 
   ! Alternate method for setting ltasks for MPI-based versions.
@@ -177,10 +203,14 @@ program main
       if( file_exists )  call expire(0,'main',&
         & 'name='//iname//' fails. '//isub(i)//' already exists.')
     endif
-    if( isub(i)==' ' .and. msub(i)/='com' )  isub(i)=msub(i)
+    if( isub(i)==' ' .and. msub(i)/='com' .and. msub(i)/='fcad')  isub(i)=msub(i)
   enddo
   call set_filenames
 
+  if (isdgmc == 1) then
+     call init_dagmc
+  endif 
+
   ! Create the output print file and write heading on it.
   call unique(outp,jtty)
   open(iuo,file=outp,status='new')
@@ -192,6 +222,7 @@ program main
 170 format( "1",a8, " version ",a5, " ld=",a8,8x,a10,2x,a19/&
     & ,1x,73( "*"),:17x, "probid = ",a19)
   write(iuo,'(1x,a80/)') exms
+  if (isdgmc == 1) call dagmc_version_heading(iuo)
 
   call ttyint
 
diff -rupN Source-orig/src/mcnp_input.F90 Source/src/mcnp_input.F90
--- Source-orig/src/mcnp_input.F90	2016-03-17 22:16:23.000000000 -0500
+++ Source/src/mcnp_input.F90	2016-03-18 17:40:17.792223117 -0500
@@ -8,7 +8,7 @@ module mcnp_input
   integer,private :: i                  ! Local loop variable.
 
   ! Module Parameters:
-  integer,parameter :: nkcd   = 104     != Number of different types of input cards.
+  integer,parameter :: nkcd   = 107     != Number of different types of input cards.
   integer,parameter :: ntalmx = 1000    != Maximum number of tallies.
   integer,parameter :: mopts  = 7       != Number of M card options (gas, estep, etc.).
 
@@ -121,6 +121,12 @@ module mcnp_input
   ! rand card keywords, input values
   character(len=6), parameter ::  hrand(4) = (/'gen   ','seed  ','stride','hist  '/)
 
+  ! dagmc card keywords, input values
+  character(len=14), parameter :: hdagmc(4) = (/'check_src_cell', &
+    &                                           'usecad        ', &
+    &                                           'distlimit     ', &
+    &                                           'tolerance     ' /)
+
   !  ----------------------------------------------------------------------
   ! initialize data for imcn.
   integer,parameter,private :: nx=5*mxdx+3
@@ -239,4 +245,5 @@ module mcnp_input
   data cnm(102),(krq(i,102),i=1,7)/ 'spdtl',0,0, 0,0, 0,   1,0 / 
   data cnm(103),(krq(i,103),i=1,7)/ 'uran ',0,0, 0,0, 0,   0,0 / 
   data cnm(104),(krq(i,104),i=1,7)/ 'hsrc ',0,0, 0,0, 0,   0,0 / 
+  data cnm(107),(krq(i,104),i=1,7)/ 'dagmc',0,0, 0,0, 0,  12,0 / 
 end module mcnp_input
diff -rupN Source-orig/src/mcnp_iofiles.F90 Source/src/mcnp_iofiles.F90
--- Source-orig/src/mcnp_iofiles.F90	2016-03-17 22:16:23.000000000 -0500
+++ Source/src/mcnp_iofiles.F90	2016-03-18 17:40:17.792223117 -0500
@@ -34,7 +34,12 @@ module mcnp_iofiles
     &  wwinp   = '        ', &  != weight windows input name.
     &  meshtal = '        ', &  != meshtally output file
     &  dumn1   = '        ', &
-    &  dumn2   = '        '
+    &  dumn2   = '        ', &
+    &  gcad    = '        ', &  != DAGMC geometry input file (CAD or facets)
+    &  lcad    = '        ', &  != DAGMC input log file
+    &  fcad    = '        ', &  != DAGMC facets output file
+    &  ftol    = '        '     != DAGMC faceting tolerance
+
 
   ! isub:  names of files.
   character(len=8) ::  isub(ndef) = & != Runtime file names.
@@ -45,7 +50,9 @@ module mcnp_iofiles
     & (/ 'inp     ', 'outp    ', 'runtpe  ', 'mctal   ', 'wssa    ', &
     &    'ptrac   ', 'comout  ', 'srctp   ', 'wwout   ', 'wwone   ', &
     &    'plotm   ', 'rssa    ', 'xsdir   ', 'com     ', 'wwinp   ', &
-    &    'meshtal ', 'dumn1   ', 'dumn2   ', ('        ',j=1,14) /)
+    &    'meshtal ', 'dumn1   ', 'dumn2   ', &
+    &    'gcad    ', 'lcad    ', 'fcad    ', 'ftol    ', &
+    &   ('        ',j=1,10) /)
 
   ! General character variables:
   character(len=80) :: hdpath, hdpth
@@ -80,6 +87,10 @@ contains
     meshtal = isub(16)
     dumn1   = isub(17)
     dumn2   = isub(18)
+    gcad    = isub(19)
+    lcad    = isub(20)
+    fcad    = isub(21)
+    ftol    = isub(22)
     return
   end subroutine set_filenames
 
diff -rupN Source-orig/src/mcnp_params.F90 Source/src/mcnp_params.F90
--- Source-orig/src/mcnp_params.F90	2016-03-17 22:16:23.000000000 -0500
+++ Source/src/mcnp_params.F90	2016-03-18 17:40:17.792223117 -0500
@@ -128,6 +128,7 @@ module mcnp_params
   integer,parameter :: iumt = 54        != I/O unit for the mesh tally output file
   integer,parameter :: iuwe = 55        != I/O unit for output WWOUT file.
   integer,parameter :: iuw1 = 56        != I/O unit for output WWONE file.
+  integer,parameter :: iulc = 57        != I/O unit for DAGMC log file
   integer,parameter :: iub  = 60        != I/O unit for bank backup file.
 
   integer,parameter :: uran_mx = 2      != max number of random universe translations
diff -rupN Source-orig/src/msgcon.F90 Source/src/msgcon.F90
--- Source-orig/src/msgcon.F90	2016-03-17 22:16:23.000000000 -0500
+++ Source/src/msgcon.F90	2016-03-18 17:40:17.792223117 -0500
@@ -16,6 +16,7 @@ subroutine msgcon( msgcon_action )
   use fmesh_mod, only:fmesh_msgput,fmesh_msgcon
   use qttyin_mod, only: qttyin
   use erprnt_mod, only: erprnt, erprnt_i8_k1
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
 
@@ -157,6 +158,11 @@ subroutine msgcon( msgcon_action )
   call fmesh_msgput
   call dm_send(-1,14,i)
 
+  write(jtty,*) "master sending DAGMC information...."
+  call dm_sndi
+  call dagmc_msgput
+  call dm_send(-1,20,i)
+
   ! Send cross section data.
   if( lxs>0 ) then
     write(jtty,*) "master sending cross section data..."
diff -rupN Source-orig/src/msgtsk.F90 Source/src/msgtsk.F90
--- Source-orig/src/msgtsk.F90	2016-03-17 22:16:23.000000000 -0500
+++ Source/src/msgtsk.F90	2016-03-18 17:40:17.792223117 -0500
@@ -15,6 +15,7 @@ subroutine msgtsk
   use dynamic_arrays
   use messages
   use fmesh_mod, only:  fmesh_msgget, fmesh_msgtsk
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
 
@@ -80,6 +81,9 @@ subroutine msgtsk
   call dyn_msgget
   call fmesh_msgget
 
+  call dm_recv(-1,20,i)
+  call dagmc_msgget  
+
   ! Receive cross section data.
   if( lxs>0 ) then
     is_assoc = associated(xss)
diff -rupN Source-orig/src/namchg.F90 Source/src/namchg.F90
--- Source-orig/src/namchg.F90	2016-03-17 22:16:23.000000000 -0500
+++ Source/src/namchg.F90	2016-03-18 17:40:17.792223117 -0500
@@ -6,15 +6,19 @@ function namchg(mm,ji)
 
   use mcnp_global
   use mcnp_debug
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
 
-  if( mm==2 ) then
+  ! DAGMC: Need to change some of these conditionals, no bounding
+  !        surfaces exist in CAD mode, handle as regular surface
+
+  if( ( mm==2 ) .or. ( ( mm == 3) .and. ( isdgmc == 1 ) ) ) then
     !  >>>>>  mm=2 -- surface
     do namchg=1,mxj
       if( nsf(namchg)==abs(ji) )  return
     end do
-  elseif( mm==3 ) then
+  elseif( ( mm==3 ) .and. ( isdgmc == 0 ) ) then
     !  >>>>>  mm=3 -- bounding surface
     do kk=1,nlja
       namchg = abs(lja(kk))
diff -rupN Source-orig/src/newcel.F90 Source/src/newcel.F90
--- Source-orig/src/newcel.F90	2016-03-17 22:16:23.000000000 -0500
+++ Source/src/newcel.F90	2016-03-18 17:40:17.792223117 -0500
@@ -8,8 +8,17 @@ subroutine newcel(cs)
   use mcnp_global
   use mcnp_debug
   use uran_mod
+  use dagmc_mod
   implicit real(dknd) (a-h,o-z)
    
+  ! DAGMC: In CAD mode, call MOAB version of this
+  if ( isdgmc == 1 ) then
+    if ( cs /= 0 ) cs = angl()
+    call dagmcnewcel(lev,uuu,vvv,www,xxx,yyy,zzz,dls,jap,jsu, &
+     &               icl,iap,mxa)
+    if ( mxa == -1 ) kdb = 1
+  endif
+
   ! shift to the higher level if one was found in track.
   if( levp/=lev ) then
     lev = levp
@@ -33,7 +42,10 @@ subroutine newcel(cs)
   if( iovr==2 ) then
     kdb = 1
   else
-    call expirx(1,'newcel','the surface crossed is not a surface of this cell.')
+    ! DAGMC: Only check this if running normally, (NOT in CAD mode)
+    if (isdgmc == 0) then
+      call expirx(1,'newcel','the surface crossed is not a surface of this cell.')
+    endif
   endif
   return
 
diff -rupN Source-orig/src/nextit.F90 Source/src/nextit.F90
--- Source-orig/src/nextit.F90	2016-03-17 22:16:23.000000000 -0500
+++ Source/src/nextit.F90	2016-03-18 17:40:17.792223117 -0500
@@ -10,6 +10,7 @@ subroutine nextit
   use fmesh_mod
   use erprnt_mod
   use entropy_mod
+  use dagmc_mod
 #if defined(VISED) && defined(DEC)
   use c_interfaces
 #endif
@@ -1566,7 +1567,28 @@ case( 2 )
       hsrc_auto_mesh = 0
       call entropy_mesh_set_params
     endif
- 
+
+  case( 107 )
+    !  >>>>>  DAGMC parameters                                          dagmc
+    !  Modeled after RAND (99)
+    ! m1c=index of current dagmc keyword.
+    if( m1c == 0 ) then
+      if( index(',=',hitm(1:1))==0 ) then
+        do m1c = 1,4
+          if( hitm(1:14)==hdagmc(m1c) )  return
+        enddo
+        m1c = 0
+      endif
+    else
+      if( index(',=',hitm(1:1))==0 ) then
+        if( m1c==1 .and. ( hitm(1:2) == 'of' .or. hitm(1:2) == 'no') )  dagmc_srcmode = 1 
+        if( m1c==2 .and. ( hitm(1:2) == 'on' .or. hitm(1:2) == 'ye') )  dagmc_usecad = 1
+        if( m1c==3 .and. ( hitm(1:2) == 'on' .or. hitm(1:2) == 'ye') )  dagmc_distlimit = 1
+        if( m1c==4 )  dagmc_tolerance = ritm
+        m1c = 0
+      endif
+    endif
+
   end select
   return
 end subroutine nextit
diff -rupN Source-orig/src/oldcrd.F90 Source/src/oldcrd.F90
--- Source-orig/src/oldcrd.F90	2016-03-17 22:16:23.000000000 -0500
+++ Source/src/oldcrd.F90	2016-03-18 17:40:17.792223117 -0500
@@ -9,6 +9,7 @@ subroutine oldcrd
   use mcnp_input
   use fmesh_mod
   use erprnt_mod
+  use dagmc_mod
 #if defined(VISED) && defined(DEC)
   use c_interfaces
 #endif
@@ -34,7 +35,8 @@ subroutine oldcrd
     if( likef==0 ) then
       if(m1c /= 0)  call erprnt(2,1,0,0,0,0,0,0,'  "parentheses used incorrectly."')
       lca(mxa+1) = nlja+1
-      if( lca(mxa)==nlja+1 ) &
+      ! DAGMC: In DAGMC mode, cells should have no surfaces
+      if( ( lca(mxa)==nlja+1 ) .and. ( isdgmc == 0)  ) &
         & call erprnt(2,1,0,0,0,0,0,0,'  "this cell has no surfaces."')
     else
       call likebt(2)
@@ -46,6 +48,10 @@ subroutine oldcrd
     !  >>>>>  surface descriptions
     ! m1c=surface type index.
     ! m2c=1 if surface type symbol is the second item.
+
+    ! DAGMC: Break out of subroutine here in CAD mode
+    if ( isdgmc == 1 ) return
+
     ix = lsc(mxj)
     if( (m1c==1 .and. nwc>5+m2c) .or. &
       & (m1c>=27 .and. m1c<=29)   .or. m1c>39 ) then
diff -rupN Source-orig/src/pass1.F90 Source/src/pass1.F90
--- Source-orig/src/pass1.F90	2016-03-17 22:16:23.000000000 -0500
+++ Source/src/pass1.F90	2016-03-18 17:40:17.792223117 -0500
@@ -11,9 +11,13 @@ subroutine pass1
   use mcnp_debug
   use mcnp_input
   use dynamic_arrays
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
 
+  ! DAGMC: For CAD mode, read cell/surface cards from log file
+  if ( isdgmc == 1) call lcadrd
+
   ! Process 3 data blocks, which are separated by blank lines.
   rewind iu1
   DO_50: do ib=1,3
diff -rupN Source-orig/src/sourcb.F90 Source/src/sourcb.F90
--- Source-orig/src/sourcb.F90	2016-03-17 22:16:23.000000000 -0500
+++ Source/src/sourcb.F90	2016-03-18 17:40:17.792223117 -0500
@@ -6,11 +6,14 @@ subroutine sourcb
 
   use mcnp_global
   use mcnp_debug
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
   character(len=5) ::  hc
   real(dknd) :: fb(maxv), sf(3)
   integer    :: ic(maxv)
+
+  integer :: idagsrc
   
   sf(1:3) = 0.
   sff(1:3,1:maxv) = srv(1:3,1:maxv)
diff -rupN Source-orig/src/tally.F90 Source/src/tally.F90
--- Source-orig/src/tally.F90	2016-03-17 22:16:23.000000000 -0500
+++ Source/src/tally.F90	2016-03-18 17:40:17.792223117 -0500
@@ -8,6 +8,7 @@ subroutine tally( lo, dr )
 
   use mcnp_global
   use mcnp_debug
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
   integer :: ik(8), ii(3)
@@ -285,6 +286,10 @@ subroutine tally( lo, dr )
     if( iptal(4,1,ital)==0 )  go to 470
     ig = iptal(4,1,ital)
     call chkcel(ig,3,j)
+
+    ! DAGMC: If in CAD mode, make sure distance to physics collision is initialized
+    if ( isdgmc == 1 ) call dagmc_setdis(huge_float)
+
     call track(ig)
     if( kdb/=0 )  go to 999 ! Return
     n = iptal(4,4,ital)-2
diff -rupN Source-orig/src/track.F90 Source/src/track.F90
--- Source-orig/src/track.F90	2016-03-17 22:16:23.000000000 -0500
+++ Source/src/track.F90	2016-03-18 17:40:17.792223117 -0500
@@ -12,6 +12,7 @@ subroutine track(ih)
   use mcnp_global
   use mcnp_debug
   use qttyin_mod, only: qttyin
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
   real(dknd) :: dl(0:mxlv)
@@ -23,6 +24,15 @@ subroutine track(ih)
       call qttyin(-1,' "nps =",i12,5x,  "collisions =",i6')
     endif
   endif
+
+  ! DAGMC: If in CAD mode, call DAGMC version of track instead
+  if ( isdgmc == 1 ) then    
+    call dagmctrack(ih,uuu,vvv,www,xxx,yyy,zzz,huge_float,dls, &
+     &               jap,jsu,nps)
+    if ( dls == huge_float ) kdb = 2
+    return
+  endif
+
   ll = lev
   ic = ih
 
diff -rupN Source-orig/src/transm.F90 Source/src/transm.F90
--- Source-orig/src/transm.F90	2016-03-17 22:16:23.000000000 -0500
+++ Source/src/transm.F90	2016-03-18 17:40:17.792223117 -0500
@@ -8,6 +8,7 @@ subroutine transm(dd,st,iz)
 
   use mcnp_global
   use mcnp_debug
+  use dagmc_mod
   implicit real(dknd) (a-h,o-z)
 
   iz = 0
@@ -30,6 +31,8 @@ subroutine transm(dd,st,iz)
     endif
 
     ! calculate the attenuation for this section of the track.
+    ! DAGMC: If in CAD mode, call dagmc_setdis first
+    if ( isdgmc == 1 ) call dagmc_setdis( dd - sd )
     call track(icl)
     if( kdb/=0 ) go to 90
     totm = 0.
diff -rupN Source-orig/src/volume.F90 Source/src/volume.F90
--- Source-orig/src/volume.F90	2016-03-17 22:16:23.000000000 -0500
+++ Source/src/volume.F90	2016-03-18 17:40:17.792223117 -0500
@@ -9,10 +9,17 @@ subroutine volume
   use mcnp_input
   use qttyin_mod, only: qttyin
   use erprnt_mod, only: erprnt
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
   character(len=23) :: hh
   
+  ! DAGMC: In CAD mode, circumvent most of this function and call DAGMC version
+  if (isdgmc == 1) then
+    call dagmcvolume(mxa,vols,mxj,aras)
+    goto 260
+  endif
+
   ! assume y-axis symmetry to start with.
   bbb(1:4,1:4) = 0.
   bbb(1,1) = 1.
