diff -rupN Source-1.40/src/angl.F90 Source-1.40_dagmc/src/angl.F90
--- Source-1.40/src/angl.F90	2016-03-21 17:56:27.397857866 -0500
+++ Source-1.40_dagmc/src/angl.F90	2016-03-21 17:56:27.405857787 -0500
@@ -9,11 +9,19 @@ function angl()
   ! Modules used:
   use mcnp_global
   use mcnp_debug
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
   integer :: ij = 0 ! local jsu error counter
   integer :: is = 0 ! local surface error counter
 
+  ! DAGMC: In CAD mode, circumvent entire function and call DAGMC version instead
+  if (isdgmc == 1) then
+     call dagmcangl(jsu,xxx,yyy,zzz,ang)
+     angl=max(-one,min(one,ang(1)*uuu+ang(2)*vvv+ang(3)*www))
+     return
+  endif
+
   ! initialize angl so that angl doesn't get underflow or overflow
   angl=one
 
diff -rupN Source-1.40/src/bankit.F90 Source-1.40_dagmc/src/bankit.F90
--- Source-1.40/src/bankit.F90	2016-03-21 17:56:27.397857866 -0500
+++ Source-1.40_dagmc/src/bankit.F90	2016-03-21 21:22:49.177866132 -0500
@@ -8,6 +8,7 @@ subroutine bankit(m)
   ! Modules:
   use mcnp_global
   use mcnp_debug
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
   integer, parameter :: nx = nbmx/2
@@ -43,6 +44,11 @@ contains
       endif
     endif
     
+    ! DAGMC:
+    if ( isdgmc == 1 ) then
+      call dagmc_bank_push( nbnk )
+    endif
+
     ! Make room for the new particle if necessary.
     if( jbnk>=nbmx ) then
       
@@ -160,6 +166,12 @@ contains
     ! Description
     ! m=100 -- Retrieve a particle from the bank. 
     ! 
+
+    ! DAGMC:
+    if ( isdgmc == 1 ) then
+       call dagmc_bank_usetop(  )
+    endif
+
 130 continue
   ! Fetch a block from the backup file if necessary.
     if( jbnk==0 ) then
@@ -226,6 +238,10 @@ contains
     endif
 
     if( npa<=1 ) then
+      ! DAGMC:
+      if ( isdgmc == 1 ) then
+        call dagmc_bank_pop( nbnk )
+      endif
       nbnk = nbnk-1
       jbnk = jbnk-1
       mbb = mb
diff -rupN Source-1.40/src/celsrf.F90 Source-1.40_dagmc/src/celsrf.F90
--- Source-1.40/src/celsrf.F90	2016-03-21 17:56:27.397857866 -0500
+++ Source-1.40_dagmc/src/celsrf.F90	2016-03-21 20:05:12.220369708 -0500
@@ -10,6 +10,7 @@ subroutine celsrf
   use mcnp_debug
   use mcnp_input
   use erprnt_mod
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
   character hj(2,3)*10, hl*5, hp*130, hq*2, ht*4
@@ -307,6 +308,10 @@ subroutine celsrf
 470 continue
   jp = 0
   DO_500: do j=1,mxj
+
+    ! DAGMC: Skip this loop if in CAD mode
+    if (isdgmc == 1) exit
+
     if( idns(j)/=0 )  cycle DO_500
     if( ksm(j)/=0  )  cycle DO_500
     if( ksu(j)>0   )  jp=1
diff -rupN Source-1.40/src/chekit.F90 Source-1.40_dagmc/src/chekit.F90
--- Source-1.40/src/chekit.F90	2016-03-21 17:56:27.397857866 -0500
+++ Source-1.40_dagmc/src/chekit.F90	2016-03-21 20:08:35.230433126 -0500
@@ -1062,6 +1062,7 @@ case( 89 )
         endif
       enddo
       if(      hitm(1:3)/='xyz' .and. hitm(1:3)/='rec'  &
+        & .and.hitm(1:3)/='dag'  &  ! DAGMC option
         & .and.hitm(1:3)/='rzt' .and. hitm(1:3)/='cyl'  &
         & .and.hitm(1:3)/='col' .and. hitm(1:3)/='ij '  &
         & .and.hitm(1:3)/='ik ' .and. hitm(1:3)/='jk'   &
diff -rupN Source-1.40/src/chkcel.F90 Source-1.40_dagmc/src/chkcel.F90
--- Source-1.40/src/chkcel.F90	2016-03-21 17:56:27.393857906 -0500
+++ Source-1.40_dagmc/src/chkcel.F90	2016-03-21 20:12:13.292374743 -0500
@@ -20,10 +20,17 @@ subroutine chkcel(i1,m,j)
   ! Modules used:
   use mcnp_global
   use mcnp_debug
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
   integer :: j,k,ie=0
 
+  ! DAGMC: In CAD mode, circumvent this function and call DAGMC version instead
+  if ( isdgmc == 1 .and. (m == 0 .or. m==2) ) then
+    call dagmcchkcel(uuu,vvv,www,xxx,yyy,zzz,i1,j)
+    return
+  endif
+  
   ! Do all surfaces of cell i1 or until mm is matched.
   j2 = abs(lca(i1))
   iL = j2-lca(i1)+m
diff -rupN Source-1.40/src/dagmc_mod.F90 Source-1.40_dagmc/src/dagmc_mod.F90
--- Source-1.40/src/dagmc_mod.F90	1969-12-31 18:00:00.000000000 -0600
+++ Source-1.40_dagmc/src/dagmc_mod.F90	2016-03-21 17:56:27.401857826 -0500
@@ -0,0 +1,254 @@
+module dagmc_mod
+
+  use mcnp_params
+  use pblcom, only: mpb
+
+  integer, parameter, public :: & ! named constant for file distribution mode
+     & DGFM_SEQ   = 0, &
+     & DGFM_READ  = 1, & 
+     & DGFM_BCAST = 2 
+
+  integer, save :: isdgmc 
+
+  integer, save :: dagmc_geom_file_mode = DGFM_SEQ  ! default to a distributed read
+
+  integer, save :: dagmc_srcmode = 0
+  integer, save :: dagmc_usecad  = 0
+  integer, save :: dagmc_distlimit = 0
+  
+  real(dknd), save :: dagmc_facet_tol
+  real(dknd), save :: dagmc_overlap_thickness
+  real(dknd), save :: dagmc_version
+  
+  integer, save :: dagmc_subversion
+
+  public :: &
+    &   lcadrd, &        ! read log file information
+    &   dagmc_msgput, &  ! share dagmc settings to slave tasks
+    &   dagmc_msgget    ! receive dagmc settings from master task
+
+contains
+
+  subroutine lcadrd
+    ! Description:
+    ! Reads in the CAD log file and "inserts" it at the header
+    ! of the input file.
+    
+    ! >>>>> Modules used
+    use mcnp_global
+    use mcnp_params
+    use mcnp_iofiles
+    
+    ! >>>>> Implict declaration of real variables as doubles
+    implicit real(dknd) (a-h,o-z)
+    
+    ! >>>>> Other variables
+    character(len=80)  :: hk          ! Character for line of file being read
+    integer, parameter :: ie = 70     ! I/O index of a scratch file
+    integer            :: it, iu = 0  ! Indices for nxtsym function
+    integer            :: ios = 0     ! IOSTAT for file reading
+    
+    ! >>>>> Initialize the scratch file and get to beginning of input file
+    open(ie,status='scratch')
+    rewind iui
+    
+    ! >>>>> Check if first line is message block, otherwise assume a title card
+    read(iui,'(a80)',end=1000) hk
+    call nxtsym(hk,' ',1,it,iu,1)
+    
+    if (hk(it:iu) == 'message:') then
+       ! Message block exists, read until blank line found
+       do
+          read(iui,'(a80)',end=1000) hk   ! Read in string: exception for eof
+          if (hk == ' ') exit             ! Terminate loop once blank line found 
+       enddo
+       ! Read in title card, for message block case
+       read(iui,'(a80)',end=1000) hk
+    endif
+    
+    ! Write title card to scratch file
+    write(ie,'(a80)') hk
+    
+    ! >>>>> Read in cell/surface cards from log
+    rewind iulc
+    do
+       read(iulc, '(a80)', iostat=ios) hk
+       
+       ! Check for end of file or errors
+       if (ios == 0) then
+          write(ie,'(a80)') hk     ! Write the line normally
+       elseif (ios < 0) then
+          exit                     ! Break loop at EOF
+       else
+          goto 2000                ! Exception for severe I/O error
+       endif
+    enddo
+    
+    ! >>>> Read in rest of input file
+    ios = 0
+    do
+       read(iui, '(a80)', iostat = ios) hk
+       
+       ! Check for end of file or errors
+       if (ios == 0) then
+          write(ie,'(a80)') hk     ! Write the line to scratch file
+       elseif (ios < 0) then
+          exit                     ! Break loop at EOF
+       else
+          goto 3000                ! Exception for severe I/O error
+       endif
+    enddo
+    
+    ! >>>>> Echo back to new scratch input file
+    close(iui)
+    rewind ie
+    open(iui,status='scratch')
+    ios = 0
+    do      
+       read(ie, '(a80)', iostat = ios) hk
+       
+       ! Check for end of file or errors
+       if (ios == 0) then
+          write(iui,'(a80)') hk    ! Write the line in the scratch input file
+       elseif (ios < 0) then
+          exit                     ! Break loop at EOF
+       else
+          goto 4000                ! Exception for severe I/O error
+       endif
+       
+    enddo
+    
+    ! >>>>> Finish up
+    rewind iui
+    ! pass1 expects iui to be advanced beyond the title card, 
+    ! so read past the first line now
+    read(iui, '(a)')
+
+    close(ie)
+    return
+    
+    ! >>>>> Exceptions
+    ! End of File at header of input file
+1000 call expire(0,'lcadrd','unexpected eof in file '//inp)
+    return
+    ! Severe I/O error during reading of CAD log
+2000 call expire(0,'lcadrd','error during read of file '//lcad)
+    return
+    ! Severe I/O error during reading of CAD log
+3000 call expire(0,'lcadrd','error during read of file '//inp)
+    return
+    ! Severe I/O error during echo of scratch file to new input file
+4000 call expire(0,'lcadrd','error stitching input and CAD log')
+    return
+    
+  end subroutine lcadrd
+
+  subroutine dagmc_msgput
+
+    use messages, only : msg_put
+    use mcnp_iofiles, only: gcad, ftol
+    use fixcom, only : ntal
+    use mcnp_debug
+
+    call msg_put (isdgmc)
+    call msg_put (dagmc_geom_file_mode)
+    call msg_put (gcad)
+    call msg_put (ftol)
+    call msg_put (dagmc_srcmode)
+    call msg_put (dagmc_usecad)
+    call msg_put (dagmc_distlimit)
+    call msg_put (dagmc_overlap_thickness)
+    call msg_put (dagmc_facet_tol)
+    call msg_put (dagmc_version)
+
+  end subroutine dagmc_msgput
+
+  subroutine dagmc_msgget
+   
+    use messages, only : msg_get
+    use mcnp_iofiles, only: gcad, ftol
+    use fixcom, only : ntal
+    use mcnp_debug
+
+    implicit none
+
+    real(dknd) :: master_dagmc_version
+
+    call msg_get (isdgmc)
+    call msg_get (dagmc_geom_file_mode)
+    call msg_get (gcad)
+    call msg_get (ftol)
+    call msg_get (dagmc_srcmode)
+    call msg_get (dagmc_usecad)
+    call msg_get (dagmc_distlimit)
+    call msg_get (dagmc_overlap_thickness)
+    call msg_get (dagmc_facet_tol)
+    call msg_get (master_dagmc_version)
+
+    if ( isdgmc == 1 ) then
+       call dagmcinit(gcad//char(0),len_trim(gcad),      &
+          &           ftol//char(0),len_trim(ftol),      &
+          &           dagmc_geom_file_mode, dagmc_version, dagmc_subversion, mpb )
+       if (dagmc_version /= master_dagmc_version) then
+          ! errprt and fail!
+       end if
+       call dagmc_set_settings(dagmc_distlimit, dagmc_usecad, dagmc_overlap_thickness, dagmc_srcmode )
+    end if
+
+  end subroutine dagmc_msgget
+  
+  subroutine init_dagmc
+
+     use mcnp_iofiles
+
+     ! Check to see if the CAD file exists, if not, abort
+     inquire( file = gcad, exist = file_exists)
+     if (.not.file_exists) then
+        call expire(0,'main','CAD geometry file '//gcad// &
+             &            ' does not exist.')
+     endif
+     
+     ! initialize DAGMC, read geometry and initialize OBBTree
+     call dagmcinit(gcad//char(0),len_trim(gcad),      &
+          &         ftol//char(0),len_trim(ftol),      &
+          &         dagmc_geom_file_mode,dagmc_version, dagmc_subversion, mpb )
+
+
+     call dagmc_init_settings(dagmc_distlimit, dagmc_usecad, &
+                              dagmc_overlap_thickness, dagmc_facet_tol, dagmc_srcmode)
+
+     ! print version number message to terminal
+     call dagmc_version_heading(jtty)
+
+     ! write mesh file if requested
+     if ( len_trim(fcad) .gt. 0) then
+        call dagmcwritefacets(fcad//char(0),len_trim(fcad))     
+     endif
+
+
+     ! parse metadata and write input cards
+     call dagmcwritemcnp(gcad//char(0),lcad//char(0), len_trim(lcad))
+     
+     ! Check to ensure that the log file is written
+     inquire( file = lcad, exist = file_exists)
+     if (.not.file_exists) then
+        call expire(0,'main','CAD list file '//lcad// &
+             &             ' not written by DAGMC.')
+     endif
+     
+     ! Open the cad log file on the MCNP side
+     open( unit=iulc, file=lcad, status='old' )
+
+  end subroutine init_dagmc
+
+  ! write DagMC version number message to given file
+  subroutine dagmc_version_heading(o)
+    
+    integer :: o 
+
+     write(o,150) dagmc_version, dagmc_subversion
+150  format(1x,'This problem is using DAGMC version ',f8.3,' w/ DagMC r', i4)
+
+  end subroutine dagmc_version_heading
+
+end module dagmc_mod
diff -rupN Source-1.40/src/dbmin.F90 Source-1.40_dagmc/src/dbmin.F90
--- Source-1.40/src/dbmin.F90	2016-03-21 17:56:27.393857906 -0500
+++ Source-1.40_dagmc/src/dbmin.F90	2016-03-21 17:56:27.405857787 -0500
@@ -9,9 +9,21 @@ function dbmin()
 
   use mcnp_global
   use mcnp_debug
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
 
+  ! DAGMC: Explicitly declare variable for return value for inter-language call
+  real(dknd) :: dbmin_retval = zero
+
+  ! DAGMC: In CAD mode, call MOAB version instead
+  if ( isdgmc == 1 ) then
+     call dagmcdbmin(icl,xxx,yyy,zzz,huge_float,dbmin_retval)
+     dbmin = dbmin_retval
+     return
+  endif
+
+
   dbmin = huge_float
   ic = icl
   x0 = xxx
diff -rupN Source-1.40/src/echkcl.F90 Source-1.40_dagmc/src/echkcl.F90
--- Source-1.40/src/echkcl.F90	2016-03-21 17:56:27.393857906 -0500
+++ Source-1.40_dagmc/src/echkcl.F90	2016-03-21 21:23:13.217633416 -0500
@@ -9,16 +9,26 @@ subroutine echkcl(j)
   ! at the level (levp) of the shortest distance to boundary.
   use mcnp_global
   use mcnp_debug
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
 
   ! call regular chkcel for no repeated structures or lattices
   ! or if lev=levp (shortest distance is in level lev).
   if( junf==0 .or. lev==levp ) then
-    call  chkcel(icl,2,j)
+    if( isdgmc == 1 ) then
+      ! dagmc note: I'm not aware that lev/levp ever differ during dagmc execution,
+      !           : and I know that repeated structures are not involved,
+      !           : so I have not modified the other call to chkcel in this function.
+      !           : If I'm wrong, this same check should be added below.
+      call dagmcchkcel_by_angle( uuu, vvv, www, xxx, yyy, zzz, jsu, icl, j )
+      call dagmc_surf_reflection( uuu, vvv, www, 1 )
+    else
+      call  chkcel(icl,2,j)
+    endif
     return
   endif
-   
+
   ! in case of repeated structures, load present values in case we
   ! stay in icl. then load closest values to find j.
   le = lev
diff -rupN Source-1.40/src/electr.F90 Source-1.40_dagmc/src/electr.F90
--- Source-1.40/src/electr.F90	2016-03-21 17:56:27.397857866 -0500
+++ Source-1.40_dagmc/src/electr.F90	2016-03-21 17:56:27.405857787 -0500
@@ -9,6 +9,7 @@ subroutine electron_history_4c3
   use mcnp_debug
   use mcnp_landau, only: esloss
   use fmesh_mod, only:  mesh_score, nmesh
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
 
@@ -82,6 +83,12 @@ subroutine electron_history_4c3
           call chkcel(icl,3,j)
         endif
 
+        ! DAGMC: In DAGMC mode, use the known physics distance to limit geometry search
+        if ( isdgmc == 1 ) then
+           d = min(dtc,pmf)
+           call dagmc_setdis(d)
+        endif
+
         call track(icl)
         if( kdb/=0 )  go to 999 ! Return
         jsu = jap
diff -rupN Source-1.40/src/fmesh_mod.F90 Source-1.40_dagmc/src/fmesh_mod.F90
--- Source-1.40/src/fmesh_mod.F90	2016-03-21 17:56:27.397857866 -0500
+++ Source-1.40_dagmc/src/fmesh_mod.F90	2016-03-21 21:42:52.075187397 -0500
@@ -9,6 +9,8 @@ module fmesh_mod
   use mcnp_debug
   use mcnp_params, only: dknd
   use erprnt_mod
+  use dagmc_mod
+
   implicit none
   public
   save
@@ -16,6 +18,10 @@ module fmesh_mod
   logical :: lmtout = .false.  != Flag indicating the status of the mesh 
                                !=  tally output file.
 
+  logical :: enable_dag_tallies           = .false. != DAGMC: Indicate any dagmc tally
+  logical :: enable_dag_collision_tallies = .false. != DAGMC: Indicate a collision tally
+  logical :: enable_dag_track_tallies     = .false. != DAGMC: Indicate a track tally
+
   integer, parameter :: nfmsh = 15      != Number of keywords on the  FMESH card
 
   integer :: &
@@ -122,10 +128,96 @@ module fmesh_mod
 
   private ::  dosef_fmesh, wtmult_fmesh
 
+  ! DAGMC: These helper functions must be called with non-dereferenced Fortran pointers.
+  ! This interface specification ensures that the calls to these functions
+  ! (which are implemented in C) are made with the correct types
+  interface
+    subroutine dagmc_fmesh_get_tally_data( fm_id, fref )
+      implicit none
+      integer :: fm_id
+      ! The dknd parameter is unavailable in this scope for some reason,
+      ! so I have copied the definition of dknd from mcnp_params
+      real(selected_real_kind(15,307)) , dimension(:), pointer :: fref
+    end subroutine dagmc_fmesh_get_tally_data
+
+    subroutine dagmc_fmesh_get_error_data( fm_id, fref )
+      implicit none
+      integer :: fm_id
+      real(selected_real_kind(15,307)) , dimension(:), pointer :: fref
+    end subroutine dagmc_fmesh_get_error_data
+
+    subroutine dagmc_fmesh_get_scratch_data( fm_id, fref )
+      implicit none
+      integer :: fm_id
+      real(selected_real_kind(15,307)), dimension(:), pointer:: fref
+    end subroutine dagmc_fmesh_get_scratch_data
+
+  end interface
+
 CONTAINS
 
   !-----------------------------------------------------------------------------------------
 
+  ! DAGMC: Helper function - create a valid Fortran pointer from a C array and a length 
+  subroutine dagmc_make_fortran_pointer( fref, carray, size )
+    implicit none
+
+    integer :: size ! The size (in doubles) of the array in C
+    real(dknd), dimension(size), target :: carray ! The C pointer
+    real(dknd), dimension(:), pointer :: fref     ! The returned Fortran pointer
+
+    fref => carray
+
+  end subroutine dagmc_make_fortran_pointer
+
+  subroutine dagmc_setup_mesh_tally( idx )
+    implicit none
+    integer :: idx
+    integer :: dagmc_iscol
+    integer :: fmesh_idx
+
+    print *, shape(fm(idx)%fmarry)
+
+    ! Determine if DAGMC tally uses a multiplier                      
+    ! Default value of -1 indicates no multipliers are present        
+    fmesh_idx = -1
+
+    ! Check for energy-dependent multipliers                                     
+    if(fm(idx)%ifm_card/=0 .or. fm(idx)%icx == 1 .or. fm(idx)%intrpol /= 0) then
+      fmesh_idx = idx
+    elseif (fm(idx)%fmult > 0. .and. fm(idx)%fmult /= 1.) then
+      ! Constant multiplier only, not energy-dependent                                        
+      fmesh_idx = idx
+    endif
+
+    ! Setup dagmc mesh; parameters will be read in from FC card                               
+    if( fm(idx)%n_comment_lines > 0 ) then
+       call dagmc_fmesh_setup_mesh( fm(idx)%ipt, fm(idx)%id, fmesh_idx, &
+                                    fm(idx)%enbin, fm(idx)%nenb, fm(idx)%tot_energy_bin, &
+                                    fm(idx)%comment, fm(idx)%n_comment_lines, dagmc_iscol )
+    else
+      ! No FC card; avoid passing uninitialized pointer to C                                 
+      ! The following call will halt mcnp with an error because of the missing card.   
+      ! We could also signal an error and halt here instead.                                 
+      call dagmc_fmesh_setup_mesh( fm(idx)%ipt, fm(idx)%id, fmesh_idx, &
+                                   fm(idx)%enbin, fm(idx)%nenb, fm(idx)%tot_energy_bin, &
+                                   0, 0, dagmc_iscol )
+    endif
+
+    if( dagmc_iscol == 1 ) then
+      enable_dag_collision_tallies = .true.
+    else
+      enable_dag_track_tallies = .true.
+    endif
+
+    if ( fm(idx)%icrd==3 .and. enable_dag_tallies .eqv. .false.) then
+      enable_dag_tallies = .true.
+    endif
+
+  end subroutine dagmc_setup_mesh_tally
+
+  !-----------------------------------------------------------------------------------------
+
   subroutine fmesh_runtpw(iu)
     !  subroutine to write mesh tallies to the RUNTPE
 
@@ -133,7 +225,11 @@ CONTAINS
 
     integer, intent(in) :: iu          !Unit number
     integer            :: i,ix,iy,iz,ie
- 
+    real(dknd), dimension(:), pointer :: dagmc_runtpe_data
+
+    ! DAGMC DEBUGGING
+    ! print '(a80)', 'DAGMC MESHTAL: fmesh_runtpw'
+
     !  first write the number of meshes
     write(iu) nmesh
     if( nmesh==0 ) return
@@ -177,6 +273,14 @@ CONTAINS
     do i = 1,nmesh
          write(iu) fm(i)%fmarry(:,:,:,:,1), & 
       &          fm(i)%fmerr( :,:,:,:,1)
+         ! DAGMC:
+         if ( fm(i)%icrd==3 ) then
+           ! Get pointer to mesh's working data and fill runtpe with those contents
+           call dagmc_fmesh_get_tally_data( fm(i)%id, dagmc_runtpe_data )
+           write(iu) dagmc_runtpe_data
+           call dagmc_fmesh_get_error_data( fm(i)%id, dagmc_runtpe_data )
+           write(iu) dagmc_runtpe_data
+         endif
     enddo
 
     return
@@ -187,7 +291,7 @@ CONTAINS
   subroutine fmesh_runtpr(iu)
     !  subroutine to read mesh tallies from the RUNTPE
 
-    use mcnp_global, only:ntasks,iovr
+    use mcnp_global, only:ntasks,iovr,icl
     use mcnp_data, only: thrd_runtpe
 
     integer, intent(in) :: iu          !Unit number
@@ -198,6 +302,11 @@ CONTAINS
     logical    :: is_assoc            ! flag to test pointer association 
 #endif
 
+    real(dknd), dimension(:), pointer :: dagmc_runtpe_data
+
+    ! DAGMC DEBUGGING
+    ! print '(a80)', 'DAGMC MESHTAL: fmesh_runtpr'
+
     ! If called from mcplot, deallocate the arrays if allocated
 
     if ( nmesh > 0 .and. iovr == 5 ) then
@@ -249,6 +358,8 @@ CONTAINS
     ! Next read in the scalar and non-allocatable arrays  of derived type fm
     do i = 1,nmesh
        if ( thrd_runtpe == 'unknown' ) then
+         ! From reading tpefil.F90, I think this branch only executes if runtpe file
+         ! has suffered a read failure-- which should be uncommon. --sjackson
          read(iu)  fm(i)%id,fm(i)%ipt,fm(i)%icrd,fm(i)%itr,fm(i)%icx,fm(i)%intrpol, &
             &  fm(i)%nxrb,fm(i)%nyzb,fm(i)%nztb,fm(i)%nenb,fm(i)%ndfb,fm(i)%ifm_card,   &
             &  fm(i)%nreact,fm(i)%nireact,fm(i)%mat,fm(i)%outf,fm(i)%fact,fm(i)%fmult,&
@@ -344,10 +455,20 @@ CONTAINS
           fm(i)%fmerr(:,:,:,:,j) = 0
        enddo
        fmtal(i)%tally = 0
-     enddo
 
-    ! Allocate scratch arrays
+      ! DAGMC:
+      if ( fm(i)%icrd==3 ) then 
+        if( .not. is_assoc ) call dagmc_setup_mesh_tally( i )
+        ! Get pointer to mesh's working memory and fill it with runtpe data
+        call dagmc_fmesh_get_tally_data( fm(i)%id, dagmc_runtpe_data )
+        read(iu) dagmc_runtpe_data
+        call dagmc_fmesh_get_error_data( fm(i)%id, dagmc_runtpe_data )
+        read(iu) dagmc_runtpe_data
+      endif
+
+    enddo
 
+    ! Allocate scratch arrays
     i_size_bins=0
     do i=1,nmesh
       i_size_bins=size(fm(i)%fmerr)+i_size_bins
@@ -381,6 +502,9 @@ CONTAINS
     character(6)  :: intpol_mode  ! Dose response function interpolation mod
     character(13) :: ht(18)       ! FM card reaction list/attenuation set
 
+    ! DAGMC DEBUGGING
+    ! print '(a80)', 'DAGMC MESHTAL: ifmesh_print'
+
     do i = 1,nmesh
 
        ! print tally id, and type
@@ -507,6 +631,9 @@ CONTAINS
 
     integer :: i, is
 
+    ! DAGMC DEBUGGING
+    ! print '(a80)', 'DAGMC MESHTAL: fmesh_allocate'
+
     if( .not. allocated(fm) ) then
 
       allocate( fm(nmesh),     fmtal(nmesh),      meshid(nmesh),     intrpol(nmesh),  &
@@ -580,6 +707,9 @@ CONTAINS
     real(dknd), intent(inout) :: t    ! particle weight
     integer   , intent(in)    :: kk   ! Mesh tally number
 
+    ! DAGMC DEBUGGING
+    ! print '(a80)', 'DAGMC MESHTAL: wtmult_fmesh'
+
     jf = 0
     id = 0
     if( fm(kk)%ifm_card<0  )  go to 280
@@ -757,7 +887,10 @@ CONTAINS
 
     use messages
 
-    integer :: i
+    integer :: i,j
+
+    ! DAGMC DEBUGGING
+    ! print '(a80)', 'DAGMC MESHTAL: fmesh_msgput'
 
     call msg_put(nmesh)
 
@@ -804,6 +937,15 @@ CONTAINS
           call msg_put (fm(i)%df, 1, fm(i)%ndfb)
        endif
 
+       ! DAGMC: send comment contents if this is a dagmc mesh
+       if( fm(i)%icrd == 3 ) then
+          call msg_put( fm(i)%n_comment_lines )
+
+          do j=1,fm(i)%n_comment_lines
+             call msg_put( fm(i)%comment(j) )
+          enddo
+       endif
+
     enddo Loop1
 
     return
@@ -817,9 +959,13 @@ CONTAINS
     ! called from msgtsk
 
     use messages
-    use mcnp_global, only: ntasks
+    use mcnp_global, only: ntasks, icl
 
     integer :: i,ix,iy,iz,ie,is
+    integer :: j
+
+    ! DAGMC DEBUGGING
+    ! print '(a80)', 'DAGMC MESHTAL: fmesh_msgget'
 
     call msg_get(nmesh)
 
@@ -897,6 +1043,19 @@ CONTAINS
           call msg_get (fm(i)%df, 1, fm(i)%ndfb)
        endif
 
+       ! DAGMC: receive comment contents if this is a dagmc mesh
+       if( fm(i)%icrd == 3 ) then
+          call msg_get( fm(i)%n_comment_lines )
+
+          allocate( fm(i)%comment( fm(i)%n_comment_lines ), stat=is )
+          if(is/=0) call erprnt(1,1,0,0,0,0,0,1,' "mesh tally memory allocation failure"')
+
+          do j=1,fm(i)%n_comment_lines
+             call msg_get( fm(i)%comment(j) )
+          enddo
+
+       endif
+
        ! allocate mesh tally arrays
 
        ix = fm(i)%nxrb-1
@@ -937,6 +1096,13 @@ CONTAINS
     if(is/=0) call erprnt(1,1,0,0,0,0,0,1,' "mesh tally memory allocation failure"')
     num_bins=0
 
+    ! DAGMC:
+    do i = 1,nmesh
+       if( fm(i)%icrd == 3 ) then
+          call dagmc_setup_mesh_tally( i )
+       endif
+    enddo
+
     return
   end subroutine fmesh_msgget
 
@@ -949,6 +1115,10 @@ CONTAINS
     use messages
 
     integer :: i,ix,iy,iz,ie,isize
+    real(dknd), dimension(:), pointer :: dagmc_mpi_data
+
+    ! DAGMC DEBUGGING
+    ! print '(a80)', 'DAGMC MESHTAL: fmesh_msgcon'
 
     do i = 1,nmesh
        ix = fm(i)%nxrb-1
@@ -960,6 +1130,7 @@ CONTAINS
          ie = fm(i)%nenb-1
        endif
 
+       if( fm(i)%icrd /= 3 ) then
        isize = ix*iy*iz*ie
 
        call msg_get(fmtal(i)%tally, 1, isize)
@@ -969,6 +1140,16 @@ CONTAINS
        call msg_get(fmtal(i)%tally, 1, isize)
        fm(i)%fmerr(:,:,:,:,1) = fm(i)%fmerr(:,:,:,:,1)+  &
             &   fmtal(i)%tally(:,:,:,:,1)
+
+       else
+          ! DAGMC
+          call dagmc_fmesh_get_scratch_data( fm(i)%id, dagmc_mpi_data )
+          call msg_get( dagmc_mpi_data, 1, size(dagmc_mpi_data) )
+          call dagmc_fmesh_add_scratch_to_tally( fm(i)%id )
+          call msg_get( dagmc_mpi_data, 1, size(dagmc_mpi_data) )
+          call dagmc_fmesh_add_scratch_to_error( fm(i)%id )
+       endif
+
     enddo
 
     return
@@ -984,26 +1165,44 @@ CONTAINS
 
     integer :: i
     integer :: ix,iy,iz,ie,isize
+    real(dknd), dimension(:), pointer :: dagmc_mpi_data
+
+    ! DAGMC DEBUGGING
+    ! print '(a80)', 'DAGMC MESHTAL: fmesh_msgtsk'
 
     do i = 1,nmesh
        ix = fm(i)%nxrb-1
        iy = fm(i)%nyzb-1
        iz = fm(i)%nztb-1
        if ( fm(i)%tot_energy_bin == 1 ) then
-         ie = fm(i)%nenb
+          ie = fm(i)%nenb
        else
-         ie = fm(i)%nenb-1
+          ie = fm(i)%nenb-1
        endif
 
-       isize = ix*iy*iz*ie
-       call msg_put(fm(i)%fmarry, 1, isize)
-       call msg_put(fm(i)%fmerr, 1, isize)
+       if( fm(i)%icrd /= 3 ) then
+          isize = ix*iy*iz*ie
+          call msg_put(fm(i)%fmarry, 1, isize)
+          call msg_put(fm(i)%fmerr, 1, isize)
+
+          ! zero arrays
+          fm(i)%fmarry(:,:,:,:,1) = 0
+          fm(i)%fmerr(:,:,:,:,1) = 0
+       else
+          ! DAGMC
+          call dagmc_fmesh_get_tally_data( fm(i)%id, dagmc_mpi_data )
+          call msg_put( dagmc_mpi_data, 1, size(dagmc_mpi_data) )
+          call dagmc_fmesh_get_error_data( fm(i)%id, dagmc_mpi_data )
+          call msg_put( dagmc_mpi_data, 1, size(dagmc_mpi_data) )
+       endif
 
-       ! zero arrays
-       fm(i)%fmarry(:,:,:,:,1) = 0
-       fm(i)%fmerr(:,:,:,:,1) = 0
     enddo
 
+    if( enable_dag_tallies ) then
+       ! DAGMC
+       call dagmc_fmesh_clear_data()
+    endif
+
     return
   end subroutine fmesh_msgtsk
 
@@ -1018,6 +1217,11 @@ CONTAINS
 
     integer :: i,kt,kt1
 
+    ! DAGMC: perform end of history tasks for all dagmc mesh tallies
+    if (enable_dag_tallies) then
+      call dagmc_fmesh_end_history()
+    endif
+
     kt = ktask+2
     kt1= ktask+1
     if(num_bins(kt1) < i_size_bins) then
@@ -1067,6 +1271,32 @@ CONTAINS
 
   !-----------------------------------------------------------------------------------------
 
+  subroutine dagmc_get_multiplier( i, erg, multiplier )
+
+    use mcnp_params, only:dknd
+    use mcnp_global, only:rho,icl
+
+    integer   , intent(in) :: i
+    real(dknd), intent(in) :: erg
+    real(dknd), intent(out) :: multiplier
+    real(dknd) :: t
+
+    t = 1._dknd
+    if( fm(i)%ifm_card/=0 ) then
+      call wtmult_fmesh(t,i)
+    endif
+    t = t*fm(i)%fmult
+    if( fm(i)%fmult < 0 ) t = -t*rho(icl)
+    
+    multiplier = t
+    if ( fm(i)%icx == 1 ) multiplier = multiplier*erg
+    if ( fm(i)%intrpol /= 0 ) multiplier = multiplier*dosef_fmesh(erg,i)
+
+    return
+  end subroutine dagmc_get_multiplier
+
+  !-----------------------------------------------------------------------------------------
+
   subroutine mesh_score(ipt,x,y,z,u,v,w,erg,wgt,d)
 
     ! subroutine to track and score a particle in an arbitrary
@@ -1082,7 +1312,7 @@ CONTAINS
     real(dknd) :: r(3)         ! particle position in Cartesian  coordinates
     real(dknd) :: dircos(3)    ! particle direction cosines
     real(dknd) :: dr(3)        ! distances to the next x,y,and z mesh bin
-    real(dknd) :: rc,t,dt,score
+    real(dknd) :: rc,t,dt,score,dagmc_multiplier
 
     real(dknd) :: dstnce_to_travel  ! Distance remaining for the particle to travel
     real(dknd) :: dstnce_to_bin     ! Distance to the next mesh bin boundary
@@ -1096,12 +1326,30 @@ CONTAINS
     kt = ktask+2
     kt1= ktask+1
 
+    ! DAGMC: update multipliers if any dagmc mesh tallies exist
+    if (enable_dag_tallies) then
+       do i=1, nmesh
+          call dagmc_get_multiplier(i,erg, dagmc_multiplier) 
+          call dagmc_update_multiplier(i, dagmc_multiplier)
+       enddo
+    endif
+
+    ! DAGMC: compute scores for all dagmc mesh tallies
+    if (enable_dag_track_tallies) then
+       call dagmc_fmesh_score(ipt,x,y,z,u,v,w,erg,wgt,d,icl)
+    endif
+
     Loop1:  do i = 1,nmesh
 
        !See if this is the desired particle
 
        if( ipt/=fm(i)%ipt) cycle Loop1
 
+       ! DAGMC: skip iteration if dagmc mesh tally
+       if ( fm(i)%icrd==3 ) then
+          cycle
+       endif
+
        ! select coordinate system
 
        if( fm(i)%icrd==2 ) then
@@ -1293,7 +1541,7 @@ CONTAINS
              endif
 
             ! Score the track length
-
+            ! DAGMC: begin source modified from subroutine dagmc_get_multiplier
             t = 1._dknd
             if( fm(i)%ifm_card/=0 ) then
                call wtmult_fmesh(t,i)
@@ -1308,6 +1556,7 @@ CONTAINS
               if ( fm(i)%icx == 1 ) score = score*erg
               if ( fm(i)%intrpol /= 0 ) score = score*dosef_fmesh(erg,i)
             endif
+            ! DAGMC: end modified source
 
             fmtal(i)%tally(ixr,iyz,izt,ien,kt)=  fmtal(i)%tally(ixr,iyz,izt,ien,kt)+score
             fm(i)%fmarry(ixr,iyz,izt,ien,kt)  =    fm(i)%fmarry(ixr,iyz,izt,ien,kt)+score
@@ -1376,6 +1625,9 @@ CONTAINS
     integer    :: nextbin(3)        ! Next bin indicator
     integer    :: j,k,il,iu,im,ien,ixr,iyz,izt,kt,kt1
 
+    ! DAGMC DEBUGGING
+    ! print '(a80)', 'DAGMC MESHTAL: mesh_score_cyl'
+
     kt = ktask+2
     kt1= ktask+1
 
@@ -1684,26 +1936,43 @@ CONTAINS
     implicit real(dknd) (a-h,o-z)
     integer i,j,iibin,ix,iy,iz,ie,is
 
+    ! DAGMC DEBUGGING
+    ! print '(a80)', 'DAGMC MESHTAL: fmsh_setup'
+    ! For a dagmc mesh (icrd==3), origin and bins information will be missing
+    ! In these cases, allocate a single bin in all directions to keep this code happy
+
     !  get total number of bins for each coordinate and allocate memory
 
-    fm(nmesh)%nxrb = 1
-    do i = 1,ifmsh(6)
-       fm(nmesh)%nxrb = fm(nmesh)%nxrb+ixrtmp(i)
-    enddo
+    if( fm(nmesh)%icrd /= 3 ) then
+       fm(nmesh)%nxrb = 1
+       do i = 1,ifmsh(6)
+          fm(nmesh)%nxrb = fm(nmesh)%nxrb+ixrtmp(i)
+       enddo
+    else
+       fm(nmesh)%nxrb = 2
+    endif
     allocate (fm(nmesh)%xrbin(fm(nmesh)%nxrb),stat = is)
     if(is/=0) call erprnt(1,1,0,0,0,0,0,1,' "mesh tally memory allocation failure"')
 
-    fm(nmesh)%nyzb = 1
-    do i = 1,ifmsh(8)
-       fm(nmesh)%nyzb = fm(nmesh)%nyzb+iyztmp(i)
-    enddo
+    if( fm(nmesh)%icrd /= 3 ) then
+       fm(nmesh)%nyzb = 1
+       do i = 1,ifmsh(8)
+          fm(nmesh)%nyzb = fm(nmesh)%nyzb+iyztmp(i)
+       enddo
+    else
+       fm(nmesh)%nyzb = 2
+    endif
     allocate (fm(nmesh)%yzbin(fm(nmesh)%nyzb),stat = is)
     if(is/=0) call erprnt(1,1,0,0,0,0,0,1,' "mesh tally memory allocation failure"')
 
-    fm(nmesh)%nztb = 1
-    do i = 1,ifmsh(10)
-       fm(nmesh)%nztb = fm(nmesh)%nztb+izttmp(i)
-    enddo
+    if( fm(nmesh)%icrd /= 3 ) then
+       fm(nmesh)%nztb = 1
+       do i = 1,ifmsh(10)
+          fm(nmesh)%nztb = fm(nmesh)%nztb+izttmp(i)
+       enddo
+    else
+       fm(nmesh)%nztb = 2
+    endif
     allocate (fm(nmesh)%ztbin(fm(nmesh)%nztb),stat = is)
     if(is/=0) call erprnt(1,1,0,0,0,0,0,1,' "mesh tally memory allocation failure"')
 
@@ -1828,6 +2097,9 @@ CONTAINS
     real(dknd), intent(in) :: erg
     real(dknd)             :: dosef_fmesh
 
+    ! DAGMC DEBUGGING
+    ! print '(a80)', 'DAGMC MESHTAL: dosef_fmesh'
+
     ! use extreme value if energy is off either end of the table.
     if( erg>=fm(im)%de(fm(im)%ndfb) ) then
        dosef_fmesh = fm(im)%df(fm(im)%ndfb)
@@ -1887,6 +2159,9 @@ CONTAINS
     real(dknd), ALLOCATABLE :: rel_err(:,:)
     real(dknd) sp_norm
 
+    ! DAGMC DEBUGGING
+    ! print '(a80)', 'DAGMC MESHTAL: fmesh_print'
+
     ! Get  the source particle normalization.
     sp_norm = 1./fpi
 
@@ -1924,8 +2199,18 @@ CONTAINS
        write(iumt,'(1x,"Number of histories used for normalizing tallies = ",    &
             &  f16.2)') sp_norm
 
+    ! DAGMC: write data to file for all dagmc mesh tallies
+    if (enable_dag_tallies) then
+       call dagmc_fmesh_print( sp_norm )
+    endif
+
     do j = 1,nmesh
 
+       ! DAGMC: skip iteration if dagmc mesh tally
+       if( fm(j)%icrd == 3 ) then
+          cycle
+       endif
+
        !  convert theta bins from radians to revolutions
 
        if( fm(j)%icrd==2) fm(j)%ztbin = fm(j)%ztbin/(2_dknd*pie)
@@ -2390,6 +2675,9 @@ CONTAINS
    
     logical ::  found_tally
 
+    ! DAGMC DEBUGGING
+    ! print '(a80)', 'DAGMC MESHTAL: fmesh_initialize'
+
     !  cycle through the id numbers
     Loop1: do i = 1,ndf
 
@@ -2645,7 +2933,7 @@ CONTAINS
     ! if no EMESH card, set mesh tally energy limits
 
     do i=1,nmesh
-       if( .not.fm(i)%lemesh ) then
+       if( .not.fm(i)%lemesh .and. associated(fm(i)%enbin) ) then
           fm(i)%enbin(1) = ecf(fm(i)%ipt)
           fm(i)%enbin(2) = emx(fm(i)%ipt)
        endif
@@ -2696,6 +2984,13 @@ CONTAINS
        call ifmesh_print
     endif
 
+   ! DAGMC: setup up dagmc mesh tallies based on fmesh index i
+    do i = 1,nmesh
+       if( fm(i)%icrd == 3 ) then
+          call dagmc_setup_mesh_tally( i )
+       endif
+    enddo
+
     return
 
   end subroutine fmesh_initialize
@@ -2710,7 +3005,10 @@ CONTAINS
  
     integer, intent(in) :: ktask
     integer  :: i,kt
- 
+
+    ! DAGMC DEBUGGING
+    ! print '(a80)', 'DAGMC MESHTAL: fmesh_vtask'
+
     kt = ktask+2
     do i=1,nmesh
       fm(i)%fmarry(:,:,:,:,1) = fm(i)%fmarry(:,:,:,:,1)+fm(i)%fmarry(:,:,:,:,kt) 
@@ -2731,6 +3029,9 @@ CONTAINS
   integer   ,intent(in)  ::  num_bins
   integer                ::  il,iu,im,ibin_search
 
+    ! DAGMC DEBUGGING
+    ! print '(a80)', 'DAGMC MESHTAL: ibin_search'
+
     il = 0
     iu = num_bins+1
     do while (iu-il > 1)
diff -rupN Source-1.40/src/getpar.F90 Source-1.40_dagmc/src/getpar.F90
--- Source-1.40/src/getpar.F90	2016-03-21 17:56:27.393857906 -0500
+++ Source-1.40_dagmc/src/getpar.F90	2016-03-21 20:49:18.909414465 -0500
@@ -9,12 +9,19 @@ subroutine getpar(k1,k2)
   !       = 0 to not save repeated structures data.
   use mcnp_global
   use mcnp_debug
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
 
   n = k1
   if( k1==0 )  n = npb
   if( k1==0 )  npb = npb-1
+
+  ! DAGMC: Restore the ray history associated with this particle
+  if (isdgmc == 1) then
+     call dagmc_getpar(n)
+  endif
+
   !
   ! retrieve the integer particle attributes.
   do i = 1,lpblcm
diff -rupN Source-1.40/src/hstory.F90 Source-1.40_dagmc/src/hstory.F90
--- Source-1.40/src/hstory.F90	2016-03-21 17:56:27.397857866 -0500
+++ Source-1.40_dagmc/src/hstory.F90	2016-03-21 21:27:13.779304834 -0500
@@ -15,7 +15,8 @@ subroutine hstory
 #if defined(VISED) && defined(DEC)
   use c_interfaces
 #endif
-  use fmesh_mod, only: mesh_end_history, mesh_score, nmesh
+  use fmesh_mod, only: mesh_end_history, mesh_score, nmesh, enable_dag_collision_tallies
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
   real(dknd)       :: sr(3), sd(3)
@@ -79,9 +80,10 @@ subroutine hstory
   endif
 
   ! Calculate the distance to the cell boundary, dls.
-   if( lca(icl)<0 ) then
-     call chkcel(icl,3,j)
-   endif
+  ! DAGMC: only do this when running in non-CAD mode
+  if( lca(icl)<0 .and. (isdgmc == 0) ) then
+    call chkcel(icl,3,j)
+  endif
 50 continue
   if( wgt<=0. ) then
     if( for(icl,ipt)/=0 ) then
@@ -90,7 +92,8 @@ subroutine hstory
     endif
     call expirx(1,'hstory','the weight of the current particle is zero or less.')
   endif
-  call track(icl)
+  ! DAGMC: only call track here if in normal mode (NOT in CAD mode)
+  if (isdgmc == 0) call track(icl)
   if( kdb/=0 )  go to 390
 
   ! Calculate the distance to the nearest dxtran sphere, dxl.
@@ -147,6 +150,14 @@ subroutine hstory
         ! Sample the distance to collision, pmf, normally.
         pmf = -log(rang())*gs
       else
+        ! DAGMC: In CAD mode, call DAGMC before forcing collision
+        if ( isdgmc == 1 ) then
+           if ( lca(icl) < 0 ) call chkcel(icl,3,j)
+           call dagmc_setdis(huge_float)
+           call track(icl)
+           if ( kdb /= 0 ) goto 390
+        endif
+         
         ! Force a collision.
         call forcol
         if( kdb/=0  )  go to 390
@@ -160,6 +171,16 @@ subroutine hstory
   ! Banked uncollided forced collision part comes back here.
   ! 1 mfp mesh-based weight window check survivors come back here.
 90 continue
+
+  ! DAGMC: In CAD mode, get particle information
+  if ( isdgmc == 1 ) then
+     if (lca(icl) < 0) call chkcel(icl,3,j)
+     d = min( pmf, dxl, dtc, deb, dw )
+     call dagmc_setdis(d)
+     call track(icl)
+     if ( kdb /= 0 ) goto 390
+  endif
+
   d = min( pmf, dls, dxl, dtc, deb, dw )
 
   ! Adjust the weight for exponential transformation.
@@ -372,6 +393,12 @@ subroutine hstory
       go to 260
     endif
   endif
+
+  ! DAGMC: Collision Tally
+  if ( enable_dag_collision_tallies ) then
+    call dagmc_collision_score( ipt, xxx, yyy, zzz, erg, wgt, ple, icl )
+  endif
+
   if(     ipt==1 ) then
     call colidn
   elseif( ipt==2 ) then
@@ -422,6 +449,7 @@ subroutine hstory
 
   ! Increment particle statistics for termination type nter.
 260 continue
+  if( isdgmc == 1 ) call dagmc_particle_terminate()
   if( krflg/=0 )  call eventp(5)
   if( iptr/=0  )  call ptrak(5)
   if( nter==1  )  tmavtc(ipt,1) = tmavtc(ipt,1)+tme*wgt
diff -rupN Source-1.40/src/igeom.F90 Source-1.40_dagmc/src/igeom.F90
--- Source-1.40/src/igeom.F90	2016-03-21 17:56:27.397857866 -0500
+++ Source-1.40_dagmc/src/igeom.F90	2016-03-21 17:56:27.405857787 -0500
@@ -7,6 +7,7 @@ subroutine igeom
   use mcnp_debug
   use mcnp_input
   use erprnt_mod
+  use dagmc_mod
 #if defined(VISED) && defined(DEC)
   use c_interfaces
 #endif
@@ -69,7 +70,8 @@ subroutine igeom
 
   ! expand # operators and check the cells and surfaces.
 80 continue
-  call chekcs
+  ! DAGMC: only call this when running in normal (non-CAD) mode
+  if (isdgmc == 0) call chekcs
 
   ! calculate the constants of any lattices in the geometry.
   if( nlat/=0 ) then
diff -rupN Source-1.40/src/imcn.F90 Source-1.40_dagmc/src/imcn.F90
--- Source-1.40/src/imcn.F90	2016-03-21 17:56:27.393857906 -0500
+++ Source-1.40_dagmc/src/imcn.F90	2016-03-21 20:58:58.915735990 -0500
@@ -12,6 +12,7 @@ subroutine imcn
   use rmc_mod
   use crit1_mod
   use fmesh_mod, only: nmesh, fmesh_initialize
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
 
@@ -422,6 +423,11 @@ contains
       &                   new_stride       = RN_stride_input,  &
       &                   new_part1        = RN_hist_input     )
 
+    ! Initialize DAGMC
+    if (isdgmc == 1) then   ! set DAGMC parameters from idum & rdum
+       call dagmc_set_settings(dagmc_distlimit, dagmc_usecad, dagmc_overlap_thickness, dagmc_srcmode)
+    endif
+
     if( uran_n>0 ) then
       write(jtty,17) (uran_univ(j),(uran_xyz(i,j),i=1,3),j=1,uran_n)
 17    format(1x,/, &
diff -rupN Source-1.40/src/itally.F90 Source-1.40_dagmc/src/itally.F90
--- Source-1.40/src/itally.F90	2016-03-21 17:56:27.397857866 -0500
+++ Source-1.40_dagmc/src/itally.F90	2016-03-21 17:56:27.401857826 -0500
@@ -17,6 +17,7 @@ subroutine itally
   use mcnp_input
   use fmesh_mod,  only:  nmesh
   use erprnt_mod
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
   character(len=1) :: h
@@ -89,6 +90,13 @@ subroutine itally
         j = rtp(ipnt(1,7+m,ital)-1+i)
         k = namchg(2*m-1,j)
         if( k==0 ) go to 40
+
+        ! DAGMC: If in CAD mode, skip up until line prior to marker 40
+        if ( isdgmc == 1 ) then
+          itds(li+i) = k
+          goto 40
+        endif
+
         ! if macrobody identical surface, use master surface number.
         if( m==2 ) then
           ! check if a bounding surface, include facet if macrobody.
diff -rupN Source-1.40/src/main.F90 Source-1.40_dagmc/src/main.F90
--- Source-1.40/src/main.F90	2016-03-21 17:56:27.393857906 -0500
+++ Source-1.40_dagmc/src/main.F90	2016-03-21 21:01:27.138293798 -0500
@@ -53,6 +53,7 @@ program main
   use crit2_mod
   use ra1_mod
   use ra2_mod
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
 
@@ -142,6 +143,32 @@ program main
   endif
 
   call exemes
+
+  ! DAGMC: initialize a DAGMC run if specified
+  if (gcad /= ' ') then
+     isdgmc = 1
+
+     if (mcnp_opt_mpi) dagmc_geom_file_mode = DGFM_READ;
+
+  else
+     
+     ! Error checking for user specifying worthless files
+     if(lcad /= ' ') then
+        call expire(0,'main','CAD list file specified &
+             &   without a geometry file.')
+     endif
+     if(fcad /= ' ') then
+        call expire(0,'main','CAD facet file specified &
+             &   without a geometry file.')
+     endif
+     if(ftol /= ' ') then
+        call expire(0,'main','Facet tolerance specified &
+             &   without a geometry file.')
+     endif
+
+  endif
+
+
   if( konrun==0 )  probid = idtm
 
   ! Alternate method for setting ltasks for MPI-based versions.
@@ -181,6 +208,10 @@ program main
   enddo
   call set_filenames
 
+  if (isdgmc == 1) then
+     call init_dagmc
+  endif 
+
   ! Create the output print file and write heading on it.
   call unique(outp,jtty)
   open(iuo,file=outp,status='new')
@@ -192,6 +223,7 @@ program main
 170 format( "1",a8, " version ",a5, " ld=",a8,8x,a10,2x,a19/&
     & ,1x,73( "*"),:17x, "probid = ",a19)
   write(iuo,'(1x,a80/)') exms
+  if (isdgmc == 1) call dagmc_version_heading(iuo)
 
   call ttyint
 
diff -rupN Source-1.40/src/mcnp_input.F90 Source-1.40_dagmc/src/mcnp_input.F90
--- Source-1.40/src/mcnp_input.F90	2016-03-21 17:56:27.393857906 -0500
+++ Source-1.40_dagmc/src/mcnp_input.F90	2016-03-21 21:04:32.560492376 -0500
@@ -8,7 +8,7 @@ module mcnp_input
   integer,private :: i                  ! Local loop variable.
 
   ! Module Parameters:
-  integer,parameter :: nkcd   = 104     != Number of different types of input cards.
+  integer,parameter :: nkcd   = 107     != Number of different types of input cards.
   integer,parameter :: ntalmx = 1000    != Maximum number of tallies.
   integer,parameter :: mopts  = 7       != Number of M card options (gas, estep, etc.).
 
@@ -121,6 +121,12 @@ module mcnp_input
   ! rand card keywords, input values
   character(len=6), parameter ::  hrand(4) = (/'gen   ','seed  ','stride','hist  '/)
 
+  ! dagmc card keywords, input values
+  character(len=18), parameter :: hdagmc(4) = (/'check_src_cell    ', &
+    &                                           'usecad            ', &
+    &                                           'distlimit         ', &
+    &                                           'overlap_thickness ' /)
+
   !  ----------------------------------------------------------------------
   ! initialize data for imcn.
   integer,parameter,private :: nx=5*mxdx+3
@@ -236,7 +242,8 @@ module mcnp_input
   data cnm(99), (krq(i,99),i=1,7) / 'rand ',0,0, 0,0, 0,  12,0 /
   data cnm(100),(krq(i,100),i=1,7)/ 'irmc ',1,0, 0,1, 2,  50,0 /
   data cnm(101),(krq(i,101),i=1,7)/ 'rrmc ',1,0, 0,1,-1,  50,0 /
-  data cnm(102),(krq(i,102),i=1,7)/ 'spdtl',0,0, 0,0, 0,   1,0 / 
-  data cnm(103),(krq(i,103),i=1,7)/ 'uran ',0,0, 0,0, 0,   0,0 / 
-  data cnm(104),(krq(i,104),i=1,7)/ 'hsrc ',0,0, 0,0, 0,   0,0 / 
+  data cnm(102),(krq(i,102),i=1,7)/ 'spdtl',0,0, 0,0, 0,   1,0 /
+  data cnm(103),(krq(i,103),i=1,7)/ 'uran ',0,0, 0,0, 0,   0,0 /
+  data cnm(104),(krq(i,104),i=1,7)/ 'hsrc ',0,0, 0,0, 0,   0,0 /
+  data cnm(107),(krq(i,104),i=1,7)/ 'dagmc',0,0, 0,0, 0,  12,0 /
 end module mcnp_input
diff -rupN Source-1.40/src/mcnp_iofiles.F90 Source-1.40_dagmc/src/mcnp_iofiles.F90
--- Source-1.40/src/mcnp_iofiles.F90	2016-03-21 17:56:27.397857866 -0500
+++ Source-1.40_dagmc/src/mcnp_iofiles.F90	2016-03-21 21:05:40.047837302 -0500
@@ -34,7 +34,11 @@ module mcnp_iofiles
     &  wwinp   = '        ', &  != weight windows input name.
     &  meshtal = '        ', &  != meshtally output file
     &  dumn1   = '        ', &
-    &  dumn2   = '        '
+    &  dumn2   = '        ', &
+    &  gcad    = '        ', &  != DAGMC geometry input file (CAD or facets)
+    &  lcad    = '        ', &  != DAGMC input log file
+    &  fcad    = '        ', &  != DAGMC facets output file
+    &  ftol    = '        '     != DAGMC faceting tolerance
 
   ! isub:  names of files.
   character(len=8) ::  isub(ndef) = & != Runtime file names.
@@ -45,7 +49,9 @@ module mcnp_iofiles
     & (/ 'inp     ', 'outp    ', 'runtpe  ', 'mctal   ', 'wssa    ', &
     &    'ptrac   ', 'comout  ', 'srctp   ', 'wwout   ', 'wwone   ', &
     &    'plotm   ', 'rssa    ', 'xsdir   ', 'com     ', 'wwinp   ', &
-    &    'meshtal ', 'dumn1   ', 'dumn2   ', ('        ',j=1,14) /)
+    &    'meshtal ', 'dumn1   ', 'dumn2   ', &
+    &    'gcad    ', 'lcad    ', 'fcad    ', 'ftol    ', &
+    &   ('        ',j=1,10) /)
 
   ! General character variables:
   character(len=80) :: hdpath, hdpth
@@ -80,6 +86,10 @@ contains
     meshtal = isub(16)
     dumn1   = isub(17)
     dumn2   = isub(18)
+    gcad    = isub(19)
+    lcad    = isub(20)
+    fcad    = isub(21)
+    ftol    = isub(22)
     return
   end subroutine set_filenames
 
diff -rupN Source-1.40/src/mcnp_params.F90 Source-1.40_dagmc/src/mcnp_params.F90
--- Source-1.40/src/mcnp_params.F90	2016-03-21 17:56:27.397857866 -0500
+++ Source-1.40_dagmc/src/mcnp_params.F90	2016-03-21 17:56:27.405857787 -0500
@@ -128,6 +128,7 @@ module mcnp_params
   integer,parameter :: iumt = 54        != I/O unit for the mesh tally output file
   integer,parameter :: iuwe = 55        != I/O unit for output WWOUT file.
   integer,parameter :: iuw1 = 56        != I/O unit for output WWONE file.
+  integer,parameter :: iulc = 57        != I/O unit for DAGMC log file
   integer,parameter :: iub  = 60        != I/O unit for bank backup file.
 
   integer,parameter :: uran_mx = 2      != max number of random universe translations
diff -rupN Source-1.40/src/msgcon.F90 Source-1.40_dagmc/src/msgcon.F90
--- Source-1.40/src/msgcon.F90	2016-03-21 17:56:27.393857906 -0500
+++ Source-1.40_dagmc/src/msgcon.F90	2016-03-21 17:56:27.405857787 -0500
@@ -16,6 +16,7 @@ subroutine msgcon( msgcon_action )
   use fmesh_mod, only:fmesh_msgput,fmesh_msgcon
   use qttyin_mod, only: qttyin
   use erprnt_mod, only: erprnt, erprnt_i8_k1
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
 
@@ -157,6 +158,11 @@ subroutine msgcon( msgcon_action )
   call fmesh_msgput
   call dm_send(-1,14,i)
 
+  write(jtty,*) "master sending DAGMC information...."
+  call dm_sndi
+  call dagmc_msgput
+  call dm_send(-1,20,i)
+
   ! Send cross section data.
   if( lxs>0 ) then
     write(jtty,*) "master sending cross section data..."
diff -rupN Source-1.40/src/msgtsk.F90 Source-1.40_dagmc/src/msgtsk.F90
--- Source-1.40/src/msgtsk.F90	2016-03-21 17:56:27.397857866 -0500
+++ Source-1.40_dagmc/src/msgtsk.F90	2016-03-21 17:56:27.405857787 -0500
@@ -15,6 +15,7 @@ subroutine msgtsk
   use dynamic_arrays
   use messages
   use fmesh_mod, only:  fmesh_msgget, fmesh_msgtsk
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
 
@@ -80,6 +81,9 @@ subroutine msgtsk
   call dyn_msgget
   call fmesh_msgget
 
+  call dm_recv(-1,20,i)
+  call dagmc_msgget  
+
   ! Receive cross section data.
   if( lxs>0 ) then
     is_assoc = associated(xss)
diff -rupN Source-1.40/src/namchg.F90 Source-1.40_dagmc/src/namchg.F90
--- Source-1.40/src/namchg.F90	2016-03-21 17:56:27.397857866 -0500
+++ Source-1.40_dagmc/src/namchg.F90	2016-03-21 17:56:27.405857787 -0500
@@ -6,15 +6,19 @@ function namchg(mm,ji)
 
   use mcnp_global
   use mcnp_debug
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
 
-  if( mm==2 ) then
+  ! DAGMC: Need to change some of these conditionals, no bounding
+  !        surfaces exist in CAD mode, handle as regular surface
+
+  if( ( mm==2 ) .or. ( ( mm == 3) .and. ( isdgmc == 1 ) ) ) then
     !  >>>>>  mm=2 -- surface
     do namchg=1,mxj
       if( nsf(namchg)==abs(ji) )  return
     end do
-  elseif( mm==3 ) then
+  elseif( ( mm==3 ) .and. ( isdgmc == 0 ) ) then
     !  >>>>>  mm=3 -- bounding surface
     do kk=1,nlja
       namchg = abs(lja(kk))
diff -rupN Source-1.40/src/newcel.F90 Source-1.40_dagmc/src/newcel.F90
--- Source-1.40/src/newcel.F90	2016-03-21 17:56:27.397857866 -0500
+++ Source-1.40_dagmc/src/newcel.F90	2016-03-21 21:08:39.462096903 -0500
@@ -8,8 +8,17 @@ subroutine newcel(cs)
   use mcnp_global
   use mcnp_debug
   use uran_mod
+  use dagmc_mod
+
   implicit real(dknd) (a-h,o-z)
    
+  ! DAGMC: In CAD mode, call MOAB version of this
+  if ( isdgmc == 1 ) then
+    if ( cs /= 0 ) cs = angl()
+    call dagmcnewcel(jsu,icl,iap)
+    if ( mxa == -1 ) kdb = 1
+  endif
+
   ! shift to the higher level if one was found in track.
   if( levp/=lev ) then
     lev = levp
@@ -33,7 +42,10 @@ subroutine newcel(cs)
   if( iovr==2 ) then
     kdb = 1
   else
-    call expirx(1,'newcel','the surface crossed is not a surface of this cell.')
+    ! DAGMC: Only check this if running normally, (NOT in CAD mode)
+    if (isdgmc == 0) then
+      call expirx(1,'newcel','the surface crossed is not a surface of this cell.')
+    endif
   endif
   return
 
diff -rupN Source-1.40/src/nextit.F90 Source-1.40_dagmc/src/nextit.F90
--- Source-1.40/src/nextit.F90	2016-03-21 17:56:27.393857906 -0500
+++ Source-1.40_dagmc/src/nextit.F90	2016-03-21 21:11:06.360672872 -0500
@@ -10,6 +10,7 @@ subroutine nextit
   use fmesh_mod
   use erprnt_mod
   use entropy_mod
+  use dagmc_mod
 #if defined(VISED) && defined(DEC)
   use c_interfaces
 #endif
@@ -1412,6 +1413,7 @@ case( 2 )
         ifmsh(m1c) = ifmsh(m1c)+1
         if( hitm(1:3)=='xyz' .or. hitm(1:3)=='rec' )  fm(nmesh)%icrd=1
         if( hitm(1:3)=='rzt' .or. hitm(1:3)=='cyl' )  fm(nmesh)%icrd=2
+        if( hitm(1:3)=='dag' )                        fm(nmesh)%icrd=3 ! DAGMC option
         return
       endif
       if( hfmsh(m1c)=='out    ' .and. ifmsh(m1c)==0 ) then
@@ -1566,7 +1568,28 @@ case( 2 )
       hsrc_auto_mesh = 0
       call entropy_mesh_set_params
     endif
- 
+
+  case( 107 )
+    !  >>>>>  DAGMC parameters                                          dagmc
+    !  Modeled after RAND (99)
+    ! m1c=index of current dagmc keyword.
+    if( m1c == 0 ) then
+      if( index(',=',hitm(1:1))==0 ) then
+        do m1c = 1,4
+          if( hitm(1:18)==hdagmc(m1c) )  return
+        enddo
+        m1c = 0
+      endif
+    else
+      if( index(',=',hitm(1:1))==0 ) then
+        if( m1c==1 .and. ( hitm(1:2) == 'of' .or. hitm(1:2) == 'no') )  dagmc_srcmode = 1 
+        if( m1c==2 .and. ( hitm(1:2) == 'on' .or. hitm(1:2) == 'ye') )  dagmc_usecad = 1
+        if( m1c==3 .and. ( hitm(1:2) == 'on' .or. hitm(1:2) == 'ye') )  dagmc_distlimit = 1
+        if( m1c==4 )  dagmc_overlap_thickness = ritm
+        m1c = 0
+      endif
+    endif
+
   end select
   return
 end subroutine nextit
diff -rupN Source-1.40/src/oldcrd.F90 Source-1.40_dagmc/src/oldcrd.F90
--- Source-1.40/src/oldcrd.F90	2016-03-21 17:56:27.397857866 -0500
+++ Source-1.40_dagmc/src/oldcrd.F90	2016-03-21 21:13:25.799321737 -0500
@@ -9,6 +9,7 @@ subroutine oldcrd
   use mcnp_input
   use fmesh_mod
   use erprnt_mod
+  use dagmc_mod
 #if defined(VISED) && defined(DEC)
   use c_interfaces
 #endif
@@ -34,7 +35,8 @@ subroutine oldcrd
     if( likef==0 ) then
       if(m1c /= 0)  call erprnt(2,1,0,0,0,0,0,0,'  "parentheses used incorrectly."')
       lca(mxa+1) = nlja+1
-      if( lca(mxa)==nlja+1 ) &
+      ! DAGMC: In CAD mode, cells should have no surfaces
+      if( ( lca(mxa)==nlja+1 ) .and. ( isdgmc == 0 ) ) &
         & call erprnt(2,1,0,0,0,0,0,0,'  "this cell has no surfaces."')
     else
       call likebt(2)
@@ -46,6 +48,10 @@ subroutine oldcrd
     !  >>>>>  surface descriptions
     ! m1c=surface type index.
     ! m2c=1 if surface type symbol is the second item.
+
+    ! DAGMC: Break out of subroutine here in CAD mode
+    if ( isdgmc == 1 ) return
+
     ix = lsc(mxj)
     if( (m1c==1 .and. nwc>5+m2c) .or. &
       & (m1c>=27 .and. m1c<=29)   .or. m1c>39 ) then
@@ -740,6 +746,9 @@ subroutine oldcrd
 
   case( 98 )
     !  >>>>>  track-length mesh tallies                                 fmesh
+    ! DAGMC: skip handling imesh/jmesh/kmesh/orig when geom=DAG; check emesh before jump
+    if( ifmsh(13)==0 ) ientmp(1:ifmsh(12)) = 1
+    if( fm(nmesh)%icrd==3 ) goto 4900
     if( ifmsh(7)==0 )  ixrtmp(1:ifmsh(6)) = 1
     if( ifmsh(9)==0 )  iyztmp(1:ifmsh(8)) = 1
     if( ifmsh(11)==0 ) izttmp(1:ifmsh(10)) = 1
@@ -835,6 +844,7 @@ subroutine oldcrd
         endif
      endif
 
+4900 continue ! DAGMC jump target
      if( ifmsh(14)==0) fm(nmesh)%fact = 1.0
 
      call fmsh_setup
diff -rupN Source-1.40/src/pass1.F90 Source-1.40_dagmc/src/pass1.F90
--- Source-1.40/src/pass1.F90	2016-03-21 17:56:27.393857906 -0500
+++ Source-1.40_dagmc/src/pass1.F90	2016-03-21 17:56:27.405857787 -0500
@@ -11,9 +11,13 @@ subroutine pass1
   use mcnp_debug
   use mcnp_input
   use dynamic_arrays
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
 
+  ! DAGMC: For CAD mode, read cell/surface cards from log file
+  if ( isdgmc == 1) call lcadrd
+
   ! Process 3 data blocks, which are separated by blank lines.
   rewind iu1
   DO_50: do ib=1,3
diff -rupN Source-1.40/src/reflec.F90 Source-1.40_dagmc/src/reflec.F90
--- Source-1.40/src/reflec.F90	2016-03-21 17:56:27.393857906 -0500
+++ Source-1.40_dagmc/src/reflec.F90	2016-03-21 21:14:48.430521263 -0500
@@ -8,6 +8,7 @@ subroutine reflec
 
   use mcnp_global
   use mcnp_debug
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
 
@@ -62,5 +63,6 @@ subroutine reflec
     zzz = udt(3,l)
   endif
   if( lca(icl)<0 )  call chkcel(icl,3,j)
+  if( isdgmc == 1 ) call dagmc_surf_reflection( uuu, vvv, www, 0 )
   return
 end subroutine reflec
diff -rupN Source-1.40/src/savpar.F90 Source-1.40_dagmc/src/savpar.F90
--- Source-1.40/src/savpar.F90	2016-03-21 17:56:27.397857866 -0500
+++ Source-1.40_dagmc/src/savpar.F90	2016-03-21 21:15:42.345999043 -0500
@@ -9,6 +9,7 @@ subroutine savpar(k1,k2)
   !       = 0 to not save repeated structures data.
   use mcnp_global
   use mcnp_debug
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
 
@@ -16,6 +17,12 @@ subroutine savpar(k1,k2)
   if( k1==0 )  n = npb+1
   if( n>mpb )  go to 40
   if( k1==0 )  npb = n
+
+  ! DAGMC: save this particle's ray history
+  if (isdgmc == 1) then
+     call dagmc_savpar(n)
+  endif
+
   !
   ! save the real particle attributes.
   do i = 1,npblcm
diff -rupN Source-1.40/src/sourcb.F90 Source-1.40_dagmc/src/sourcb.F90
--- Source-1.40/src/sourcb.F90	2016-03-21 17:56:27.397857866 -0500
+++ Source-1.40_dagmc/src/sourcb.F90	2016-03-21 21:36:27.478402741 -0500
@@ -6,12 +6,13 @@ subroutine sourcb
 
   use mcnp_global
   use mcnp_debug
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
   character(len=5) ::  hc
   real(dknd) :: fb(maxv), sf(3)
   integer    :: ic(maxv)
-  
+ 
   sf(1:3) = 0.
   sff(1:3,1:maxv) = srv(1:3,1:maxv)
   icl = 0
@@ -420,7 +421,12 @@ subroutine sourcb
 400 continue
     if( icl>0  ) then
       ji = icl
-      call chkcel(ji,0,j)
+      ! DAGMC: if dagmc_srcmode is on, skip chkcel and assume particle is in user-specified cell
+      if( isdgmc==1 .and. dagmc_srcmode==1 ) then
+         j = 0
+      else
+         call chkcel(ji,0,j)
+      endif
       isef(kise+1,ji) = isef(kise+1,ji)+1
       if( j/=0 )  go to 425
     elseif( icl<0 ) then
diff -rupN Source-1.40/src/startp.F90 Source-1.40_dagmc/src/startp.F90
--- Source-1.40/src/startp.F90	2016-03-21 17:56:27.397857866 -0500
+++ Source-1.40_dagmc/src/startp.F90	2016-03-21 21:19:07.988007606 -0500
@@ -11,6 +11,7 @@ subroutine startp
   use mcnp_debug
   use uran_mod
   use rmc_mod
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
   character(len=130) :: ha
@@ -42,6 +43,10 @@ subroutine startp
   kdb  = 0
   nbnk = 0
   jbnk = 0
+  ! DAGMC: nbnk = 0
+  if ( isdgmc == 1 ) then
+    call dagmc_bank_clear
+  endif
   kqss = 0
   mbb  = 0
   lev  = 0
diff -rupN Source-1.40/src/tally.F90 Source-1.40_dagmc/src/tally.F90
--- Source-1.40/src/tally.F90	2016-03-21 17:56:27.397857866 -0500
+++ Source-1.40_dagmc/src/tally.F90	2016-03-21 17:56:27.405857787 -0500
@@ -8,6 +8,7 @@ subroutine tally( lo, dr )
 
   use mcnp_global
   use mcnp_debug
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
   integer :: ik(8), ii(3)
@@ -285,6 +286,10 @@ subroutine tally( lo, dr )
     if( iptal(4,1,ital)==0 )  go to 470
     ig = iptal(4,1,ital)
     call chkcel(ig,3,j)
+
+    ! DAGMC: If in CAD mode, make sure distance to physics collision is initialized
+    if ( isdgmc == 1 ) call dagmc_setdis(huge_float)
+
     call track(ig)
     if( kdb/=0 )  go to 999 ! Return
     n = iptal(4,4,ital)-2
diff -rupN Source-1.40/src/track.F90 Source-1.40_dagmc/src/track.F90
--- Source-1.40/src/track.F90	2016-03-21 17:56:27.397857866 -0500
+++ Source-1.40_dagmc/src/track.F90	2016-03-21 17:56:27.405857787 -0500
@@ -12,6 +12,7 @@ subroutine track(ih)
   use mcnp_global
   use mcnp_debug
   use qttyin_mod, only: qttyin
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
   real(dknd) :: dl(0:mxlv)
@@ -23,6 +24,15 @@ subroutine track(ih)
       call qttyin(-1,' "nps =",i12,5x,  "collisions =",i6')
     endif
   endif
+
+  ! DAGMC: If in CAD mode, call DAGMC version of track instead
+  if ( isdgmc == 1 ) then    
+    call dagmctrack(ih,uuu,vvv,www,xxx,yyy,zzz,huge_float,dls, &
+     &               jap,jsu,nps)
+    if ( dls == huge_float ) kdb = 2
+    return
+  endif
+
   ll = lev
   ic = ih
 
diff -rupN Source-1.40/src/transm.F90 Source-1.40_dagmc/src/transm.F90
--- Source-1.40/src/transm.F90	2016-03-21 17:56:27.393857906 -0500
+++ Source-1.40_dagmc/src/transm.F90	2016-03-21 21:47:09.444916196 -0500
@@ -8,6 +8,8 @@ subroutine transm(dd,st,iz)
 
   use mcnp_global
   use mcnp_debug
+  use dagmc_mod
+
   implicit real(dknd) (a-h,o-z)
 
   iz = 0
@@ -30,6 +32,8 @@ subroutine transm(dd,st,iz)
     endif
 
     ! calculate the attenuation for this section of the track.
+    ! DAGMC: If in CAD mode, call dagmc_setdis first
+    if ( isdgmc == 1 ) call dagmc_setdis( dd - sd )
     call track(icl)
     if( kdb/=0 ) go to 90
     totm = 0.
diff -rupN Source-1.40/src/volume.F90 Source-1.40_dagmc/src/volume.F90
--- Source-1.40/src/volume.F90	2016-03-21 17:56:27.397857866 -0500
+++ Source-1.40_dagmc/src/volume.F90	2016-03-21 17:56:27.401857826 -0500
@@ -9,10 +9,17 @@ subroutine volume
   use mcnp_input
   use qttyin_mod, only: qttyin
   use erprnt_mod, only: erprnt
+  use dagmc_mod
 
   implicit real(dknd) (a-h,o-z)
   character(len=23) :: hh
   
+  ! DAGMC: In CAD mode, circumvent most of this function and call DAGMC version
+  if (isdgmc == 1) then
+    call dagmcvolume(mxa,vols,mxj,aras)
+    goto 260
+  endif
+
   ! assume y-axis symmetry to start with.
   bbb(1:4,1:4) = 0.
   bbb(1,1) = 1.
